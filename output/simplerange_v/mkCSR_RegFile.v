//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Apr 24 15:47:46 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    65
// read_csr_port2                 O    65
// mav_read_csr                   O    65
// read_csr_cap                   O   129
// read_misa                      O    28 const
// read_mstatus                   O    64
// read_sstatus                   O    64
// read_satp                      O    64 reg
// csr_trap_actions               O   194
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   130
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// csr_counter_read_fault         O     1
// read_csr_mip                   O    12 reg
// RDY_external_interrupt_req     O     1 reg
// RDY_timer_interrupt_req        O     1 reg
// RDY_software_interrupt_req     O     1 reg
// interrupt_pending              O     6
// wfi_resume                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// mav_read_csr_csr_addr          I    12
// write_csr_cap_cap_addr         I     5
// write_csr_cap_value            I   129
// read_csr_cap_csr_addr          I     5
// write_csr_csr_addr             I    12
// write_csr_word                 I    64
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pc            I    64
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_exc_code      I     5
// csr_trap_actions_xtval         I    64
// csr_ret_actions_from_priv      I     2
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_write_csr_cap               I     1
// EN_write_csr                   I     1
// EN_csr_minstret_incr           I     1
// EN_external_interrupt_req      I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
// EN_mav_read_csr                I     1 unused
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_csr_cap_csr_addr -> read_csr_cap
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   mav_read_csr_csr_addr -> mav_read_csr
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     write_csr_cap_cap_addr,
		     write_csr_cap_value,
		     EN_write_csr_cap,

		     read_csr_cap_csr_addr,
		     read_csr_cap,

		     write_csr_csr_addr,
		     write_csr_word,
		     EN_write_csr,

		     read_misa,

		     read_mstatus,

		     read_sstatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pc,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     read_csr_mip,

		     external_interrupt_req_set_not_clear,
		     EN_external_interrupt_req,
		     RDY_external_interrupt_req,

		     timer_interrupt_req_set_not_clear,
		     EN_timer_interrupt_req,
		     RDY_timer_interrupt_req,

		     software_interrupt_req_set_not_clear,
		     EN_software_interrupt_req,
		     RDY_software_interrupt_req,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [64 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [64 : 0] read_csr_port2;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [64 : 0] mav_read_csr;

  // action method write_csr_cap
  input  [4 : 0] write_csr_cap_cap_addr;
  input  [128 : 0] write_csr_cap_value;
  input  EN_write_csr_cap;

  // value method read_csr_cap
  input  [4 : 0] read_csr_cap_csr_addr;
  output [128 : 0] read_csr_cap;

  // action method write_csr
  input  [11 : 0] write_csr_csr_addr;
  input  [63 : 0] write_csr_word;
  input  EN_write_csr;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [63 : 0] read_mstatus;

  // value method read_sstatus
  output [63 : 0] read_sstatus;

  // value method read_satp
  output [63 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [63 : 0] csr_trap_actions_pc;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_exc_code;
  input  [63 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [193 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [129 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method read_csr_mip
  output [11 : 0] read_csr_mip;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;
  input  EN_external_interrupt_req;
  output RDY_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;
  output RDY_timer_interrupt_req;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;
  input  EN_software_interrupt_req;
  output RDY_software_interrupt_req;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [5 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // signals for module outputs
  reg [128 : 0] read_csr_cap;
  wire [193 : 0] csr_trap_actions;
  wire [129 : 0] csr_ret_actions;
  wire [64 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [63 : 0] read_csr_mcycle,
		read_csr_minstret,
		read_csr_mtime,
		read_mstatus,
		read_satp,
		read_sstatus;
  wire [27 : 0] read_misa;
  wire [11 : 0] read_csr_mip;
  wire [5 : 0] interrupt_pending;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_external_interrupt_req,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_software_interrupt_req,
       RDY_timer_interrupt_req,
       csr_counter_read_fault,
       wfi_resume;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_ccsr
  reg [128 : 0] rg_ccsr;
  wire [128 : 0] rg_ccsr$D_IN;
  wire rg_ccsr$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  wire [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpc
  reg [63 : 0] rg_dpc;
  wire [63 : 0] rg_dpc$D_IN;
  wire rg_dpc$EN;

  // register rg_dscratch0
  reg [63 : 0] rg_dscratch0;
  wire [63 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [63 : 0] rg_dscratch1;
  wire [63 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_mcause
  reg [5 : 0] rg_mcause;
  reg [5 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_medeleg
  reg [15 : 0] rg_medeleg;
  wire [15 : 0] rg_medeleg$D_IN;
  wire rg_medeleg$EN;

  // register rg_mepcc
  reg [128 : 0] rg_mepcc;
  wire [128 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_mideleg
  reg [11 : 0] rg_mideleg;
  wire [11 : 0] rg_mideleg$D_IN;
  wire rg_mideleg$EN;

  // register rg_mie
  reg [11 : 0] rg_mie;
  wire [11 : 0] rg_mie$D_IN;
  wire rg_mie$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mip
  reg [11 : 0] rg_mip;
  reg [11 : 0] rg_mip$D_IN;
  wire rg_mip$EN;

  // register rg_mscratch
  reg [63 : 0] rg_mscratch;
  wire [63 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [128 : 0] rg_mscratchc;
  wire [128 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mstatus
  reg [25 : 0] rg_mstatus;
  reg [25 : 0] rg_mstatus$D_IN;
  wire rg_mstatus$EN;

  // register rg_mtcc
  reg [128 : 0] rg_mtcc;
  wire [128 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtval
  reg [63 : 0] rg_mtval;
  wire [63 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_mtvec
  reg [62 : 0] rg_mtvec;
  wire [62 : 0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_scause
  reg [5 : 0] rg_scause;
  reg [5 : 0] rg_scause$D_IN;
  wire rg_scause$EN;

  // register rg_sepcc
  reg [128 : 0] rg_sepcc;
  reg [128 : 0] rg_sepcc$D_IN;
  wire rg_sepcc$EN;

  // register rg_sscratch
  reg [63 : 0] rg_sscratch;
  wire [63 : 0] rg_sscratch$D_IN;
  wire rg_sscratch$EN;

  // register rg_sscratchc
  reg [128 : 0] rg_sscratchc;
  wire [128 : 0] rg_sscratchc$D_IN;
  wire rg_sscratchc$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_stcc
  reg [128 : 0] rg_stcc;
  wire [128 : 0] rg_stcc$D_IN;
  wire rg_stcc$EN;

  // register rg_stval
  reg [63 : 0] rg_stval;
  wire [63 : 0] rg_stval$D_IN;
  wire rg_stval$EN;

  // register rg_stvec
  reg [62 : 0] rg_stvec;
  wire [62 : 0] rg_stvec$D_IN;
  wire rg_stvec$EN;

  // register rg_tdata1
  reg [63 : 0] rg_tdata1;
  wire [63 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [63 : 0] rg_tdata2;
  wire [63 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [63 : 0] rg_tdata3;
  wire [63 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [63 : 0] rg_tselect;
  wire [63 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // register rg_uepcc
  reg [128 : 0] rg_uepcc;
  wire [128 : 0] rg_uepcc$D_IN;
  wire rg_uepcc$EN;

  // register rg_uscratchc
  reg [128 : 0] rg_uscratchc;
  wire [128 : 0] rg_uscratchc$D_IN;
  wire rg_uscratchc$EN;

  // register rg_utcc
  reg [128 : 0] rg_utcc;
  wire [128 : 0] rg_utcc$D_IN;
  wire rg_utcc$EN;

  // ports of submodule f_ei_reqs
  wire f_ei_reqs$CLR,
       f_ei_reqs$DEQ,
       f_ei_reqs$D_IN,
       f_ei_reqs$D_OUT,
       f_ei_reqs$EMPTY_N,
       f_ei_reqs$ENQ,
       f_ei_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_si_reqs
  wire f_si_reqs$CLR,
       f_si_reqs$DEQ,
       f_si_reqs$D_IN,
       f_si_reqs$D_OUT,
       f_si_reqs$EMPTY_N,
       f_si_reqs$ENQ,
       f_si_reqs$FULL_N;

  // ports of submodule f_ti_reqs
  wire f_ti_reqs$CLR,
       f_ti_reqs$DEQ,
       f_ti_reqs$D_IN,
       f_ti_reqs$D_OUT,
       f_ti_reqs$EMPTY_N,
       f_ti_reqs$ENQ,
       f_ti_reqs$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_record_external_interrupt,
       CAN_FIRE_RL_rl_record_software_interrupt,
       CAN_FIRE_RL_rl_record_timer_interrupt_req,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_csr,
       CAN_FIRE_write_csr_cap,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_record_external_interrupt,
       WILL_FIRE_RL_rl_record_software_interrupt,
       WILL_FIRE_RL_rl_record_timer_interrupt_req,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_csr,
       WILL_FIRE_write_csr_cap;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_rg_mepcc$write_1__VAL_2, MUX_rg_sepcc$write_1__VAL_1;
  wire [63 : 0] MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2;
  wire [62 : 0] MUX_rg_mtvec$write_1__VAL_1;
  wire [25 : 0] MUX_rg_mstatus$write_1__VAL_2,
		MUX_rg_mstatus$write_1__VAL_3,
		MUX_rg_mstatus$write_1__VAL_4;
  wire [15 : 0] MUX_rg_medeleg$write_1__VAL_1;
  wire [11 : 0] MUX_rg_mie$write_1__VAL_1,
		MUX_rg_mip$write_1__VAL_2,
		MUX_rg_mip$write_1__VAL_3,
		MUX_rg_mip$write_1__VAL_4,
		MUX_rg_mip$write_1__VAL_5;
  wire [5 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_3,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_medeleg$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_1,
       MUX_rg_mideleg$write_1__SEL_1,
       MUX_rg_mie$write_1__SEL_1,
       MUX_rg_mip$write_1__SEL_5,
       MUX_rg_mstatus$write_1__SEL_2,
       MUX_rg_mtvec$write_1__SEL_1,
       MUX_rg_satp$write_1__SEL_1,
       MUX_rg_scause$write_1__SEL_2,
       MUX_rg_scause$write_1__SEL_3,
       MUX_rg_sepcc$write_1__SEL_1,
       MUX_rg_sepcc$write_1__SEL_2,
       MUX_rg_stvec$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718,
	       IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308,
	       IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513;
  reg IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452,
      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555,
      n__h59371,
      n__h61402;
  wire [63 : 0] exc_pc___1__h60120,
		exc_pc__h60060,
		new_mip_w__h14574,
		new_mip_w__h18718,
		new_mip_w__h9828,
		old_mip_w__h9827,
		vector_offset__h60061,
		x__h52584,
		x__h60532,
		x__h60700,
		x__h60720,
		x__h61630;
  wire [61 : 0] x__h60123;
  wire [11 : 0] changed_bits__h42765,
		mask__h42763,
		unchanged_bits__h39508,
		unchanged_bits__h42764,
		x__h22985,
		x__h24044,
		y__h42912;
  wire [4 : 0] IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1633,
	       IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1635,
	       IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1636,
	       IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1638;
  wire [1 : 0] IF_rg_mstatus_BIT_8_THEN_0b1_ELSE_0b0__q1,
	       _theResult____h63051,
	       _theResult____h65414,
	       _theResult____h65624,
	       _theResult____h65834,
	       _theResult____h66044,
	       _theResult____h66254,
	       _theResult____h66464,
	       _theResult____h66674,
	       _theResult____h66884,
	       _theResult___fst__h58982,
	       new_mstatus_mpp__h59122,
	       new_mstatus_spp__h59123,
	       x__h45468,
	       x__h60704,
	       x__h60841,
	       x__h60843,
	       x__h61627;
  wire IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1225,
       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1228,
       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1231,
       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1234,
       IF_csr_ret_actions_from_priv_EQ_0b0_394_THEN_S_ETC___d1403,
       IF_csr_ret_actions_from_priv_EQ_0b10_389_THEN__ETC___d1400,
       IF_csr_ret_actions_from_priv_EQ_0b11_385_THEN__ETC___d1399,
       IF_csr_ret_actions_from_priv_EQ_0b1_392_THEN_S_ETC___d1402,
       NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_NOT_cs_ETC___d1372,
       NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_csr_tr_ETC___d1322,
       NOT_cfg_verbosity_read__7_ULE_1_8___d19,
       NOT_rg_mip_4_BIT_0_522_613_OR_NOT_rg_mie_2_BIT_ETC___d1620,
       NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558,
       NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585,
       NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1612,
       NOT_rg_mip_4_BIT_1_489_586_OR_NOT_rg_mie_2_BIT_ETC___d1593,
       NOT_rg_mip_4_BIT_3_456_559_OR_NOT_rg_mie_2_BIT_ETC___d1566,
       NOT_rg_mip_4_BIT_5_500_595_OR_NOT_rg_mie_2_BIT_ETC___d1602,
       NOT_rg_mip_4_BIT_7_467_568_OR_NOT_rg_mie_2_BIT_ETC___d1575,
       NOT_rg_mip_4_BIT_8_511_604_OR_NOT_rg_mie_2_BIT_ETC___d1611,
       NOT_rg_mip_4_BIT_9_478_577_OR_NOT_rg_mie_2_BIT_ETC___d1584,
       csr_trap_actions_interrupt_AND_IF_IF_csr_trap__ETC___d1251,
       deleg_bit___1__h59043,
       deleg_bit___1__h59058,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1446,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1462,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1473,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1484,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1495,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1506,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1517,
       interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1528,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1445,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1461,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1472,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1483,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1494,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1505,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1516,
       interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1527,
       rg_mip_4_BIT_0_522_AND_rg_mie_2_BIT_0_523_524__ETC___d1531,
       rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1455,
       rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1521,
       rg_mip_4_BIT_1_489_AND_rg_mie_2_BIT_1_490_491__ETC___d1498,
       rg_mip_4_BIT_3_456_AND_rg_mie_2_BIT_3_457_458__ETC___d1465,
       rg_mip_4_BIT_4_533_AND_rg_mie_2_BIT_4_534_535__ETC___d1542,
       rg_mip_4_BIT_5_500_AND_rg_mie_2_BIT_5_501_502__ETC___d1509,
       rg_mip_4_BIT_7_467_AND_rg_mie_2_BIT_7_468_469__ETC___d1476,
       rg_mip_4_BIT_8_511_AND_rg_mie_2_BIT_8_512_513__ETC___d1520,
       rg_mip_4_BIT_9_478_AND_rg_mie_2_BIT_9_479_480__ETC___d1487;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'h100 ||
	       read_csr_csr_addr == 12'h102 ||
	       read_csr_csr_addr == 12'h103 ||
	       read_csr_csr_addr == 12'h104 ||
	       read_csr_csr_addr == 12'h105 ||
	       read_csr_csr_addr == 12'h106 ||
	       read_csr_csr_addr == 12'h140 ||
	       read_csr_csr_addr == 12'h141 ||
	       read_csr_csr_addr == 12'h142 ||
	       read_csr_csr_addr == 12'h143 ||
	       read_csr_csr_addr == 12'h144 ||
	       read_csr_csr_addr == 12'h180 ||
	       read_csr_csr_addr == 12'h302 ||
	       read_csr_csr_addr == 12'h303 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'h100 ||
	       read_csr_port2_csr_addr == 12'h102 ||
	       read_csr_port2_csr_addr == 12'h103 ||
	       read_csr_port2_csr_addr == 12'h104 ||
	       read_csr_port2_csr_addr == 12'h105 ||
	       read_csr_port2_csr_addr == 12'h106 ||
	       read_csr_port2_csr_addr == 12'h140 ||
	       read_csr_port2_csr_addr == 12'h141 ||
	       read_csr_port2_csr_addr == 12'h142 ||
	       read_csr_port2_csr_addr == 12'h143 ||
	       read_csr_port2_csr_addr == 12'h144 ||
	       read_csr_port2_csr_addr == 12'h180 ||
	       read_csr_port2_csr_addr == 12'h302 ||
	       read_csr_port2_csr_addr == 12'h303 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'h100 ||
	       mav_read_csr_csr_addr == 12'h102 ||
	       mav_read_csr_csr_addr == 12'h103 ||
	       mav_read_csr_csr_addr == 12'h104 ||
	       mav_read_csr_csr_addr == 12'h105 ||
	       mav_read_csr_csr_addr == 12'h106 ||
	       mav_read_csr_csr_addr == 12'h140 ||
	       mav_read_csr_csr_addr == 12'h141 ||
	       mav_read_csr_csr_addr == 12'h142 ||
	       mav_read_csr_csr_addr == 12'h143 ||
	       mav_read_csr_csr_addr == 12'h144 ||
	       mav_read_csr_csr_addr == 12'h180 ||
	       mav_read_csr_csr_addr == 12'h302 ||
	       mav_read_csr_csr_addr == 12'h303 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 64'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // action method write_csr_cap
  assign CAN_FIRE_write_csr_cap = 1'd1 ;
  assign WILL_FIRE_write_csr_cap = EN_write_csr_cap ;

  // value method read_csr_cap
  always@(read_csr_cap_csr_addr or
	  rg_mepcc or
	  rg_utcc or
	  rg_uscratchc or
	  rg_uepcc or
	  rg_stcc or rg_sscratchc or rg_sepcc or rg_mtcc or rg_mscratchc)
  begin
    case (read_csr_cap_csr_addr)
      5'd4: read_csr_cap = rg_utcc;
      5'd6: read_csr_cap = rg_uscratchc;
      5'h07: read_csr_cap = rg_uepcc;
      5'd12: read_csr_cap = rg_stcc;
      5'd14: read_csr_cap = rg_sscratchc;
      5'd15: read_csr_cap = rg_sepcc;
      5'd28: read_csr_cap = rg_mtcc;
      5'd30: read_csr_cap = rg_mscratchc;
      default: read_csr_cap =
		   { read_csr_cap_csr_addr == 5'd31 && rg_mepcc[128],
		     (read_csr_cap_csr_addr == 5'd31) ?
		       rg_mepcc[127:0] :
		       128'd0 };
    endcase
  end

  // action method write_csr
  assign CAN_FIRE_write_csr = 1'd1 ;
  assign WILL_FIRE_write_csr = EN_write_csr ;

  // value method read_misa
  assign read_misa = 28'd135528704 ;

  // value method read_mstatus
  assign read_mstatus =
	     { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
	       27'd0,
	       rg_mstatus[25:22],
	       9'b0,
	       rg_mstatus[21:10],
	       2'b0,
	       rg_mstatus[8:0] } ;

  // value method read_sstatus
  assign read_sstatus =
	     { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
	       29'h0,
	       rg_mstatus[23:22],
	       12'h0,
	       rg_mstatus[18:17],
	       1'h0,
	       rg_mstatus[15:12],
	       4'h0,
	       rg_mstatus[8],
	       2'h0,
	       rg_mstatus[5:4],
	       2'h0,
	       rg_mstatus[1:0] } ;

  // value method read_satp
  assign read_satp = rg_satp ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions = { x__h52584, x__h60532, x__h60700, x__h60704 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions = { x__h60720, x__h61627, x__h61630 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     (csr_counter_read_fault_csr_addr == 12'hC00 &&
	      !rg_mcounteren[0] ||
	      csr_counter_read_fault_csr_addr == 12'hC01 &&
	      !rg_mcounteren[1] ||
	      csr_counter_read_fault_csr_addr == 12'hC02 &&
	      !rg_mcounteren[2] ||
	      csr_counter_read_fault_csr_addr >= 12'hC03 &&
	      csr_counter_read_fault_csr_addr <= 12'hC1F) ;

  // value method read_csr_mip
  assign read_csr_mip = rg_mip ;

  // action method external_interrupt_req
  assign RDY_external_interrupt_req = f_ei_reqs$FULL_N ;
  assign CAN_FIRE_external_interrupt_req = f_ei_reqs$FULL_N ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method timer_interrupt_req
  assign RDY_timer_interrupt_req = f_ti_reqs$FULL_N ;
  assign CAN_FIRE_timer_interrupt_req = f_ti_reqs$FULL_N ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign RDY_software_interrupt_req = f_si_reqs$FULL_N ;
  assign CAN_FIRE_software_interrupt_req = f_si_reqs$FULL_N ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1521 ||
	       rg_mip_4_BIT_0_522_AND_rg_mie_2_BIT_0_523_524__ETC___d1531 ||
	       rg_mip_4_BIT_4_533_AND_rg_mie_2_BIT_4_534_535__ETC___d1542,
	       IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1638 } ;

  // value method wfi_resume
  assign wfi_resume = (rg_mip & rg_mie) != 12'd0 ;

  // submodule f_ei_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_ei_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_ei_reqs$D_IN),
						    .ENQ(f_ei_reqs$ENQ),
						    .DEQ(f_ei_reqs$DEQ),
						    .CLR(f_ei_reqs$CLR),
						    .D_OUT(f_ei_reqs$D_OUT),
						    .FULL_N(f_ei_reqs$FULL_N),
						    .EMPTY_N(f_ei_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_si_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_si_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_si_reqs$D_IN),
						    .ENQ(f_si_reqs$ENQ),
						    .DEQ(f_si_reqs$DEQ),
						    .CLR(f_si_reqs$CLR),
						    .D_OUT(f_si_reqs$D_OUT),
						    .FULL_N(f_si_reqs$FULL_N),
						    .EMPTY_N(f_si_reqs$EMPTY_N));

  // submodule f_ti_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_ti_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_ti_reqs$D_IN),
						    .ENQ(f_ti_reqs$ENQ),
						    .DEQ(f_ti_reqs$DEQ),
						    .CLR(f_ti_reqs$CLR),
						    .D_OUT(f_ti_reqs$D_OUT),
						    .FULL_N(f_ti_reqs$FULL_N),
						    .EMPTY_N(f_ti_reqs$EMPTY_N));

  // rule RL_rl_record_external_interrupt
  assign CAN_FIRE_RL_rl_record_external_interrupt = f_ei_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_record_external_interrupt =
	     f_ei_reqs$EMPTY_N && !EN_write_csr ;

  // rule RL_rl_record_timer_interrupt_req
  assign CAN_FIRE_RL_rl_record_timer_interrupt_req = f_ti_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_record_timer_interrupt_req =
	     f_ti_reqs$EMPTY_N &&
	     !WILL_FIRE_RL_rl_record_external_interrupt &&
	     !EN_write_csr ;

  // rule RL_rl_record_software_interrupt
  assign CAN_FIRE_RL_rl_record_software_interrupt = f_si_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_record_software_interrupt =
	     f_si_reqs$EMPTY_N &&
	     !WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	     !WILL_FIRE_RL_rl_record_external_interrupt &&
	     !EN_write_csr ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_write_csr ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_write_csr && write_csr_csr_addr == 12'h342 ;
  assign MUX_rg_mcause$write_1__SEL_3 =
	     EN_csr_trap_actions && x__h60704 == 2'b11 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h306 ;
  assign MUX_rg_medeleg$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h302 ;
  assign MUX_rg_mepcc$write_1__SEL_1 =
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd31 ;
  assign MUX_rg_mideleg$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h303 ;
  assign MUX_rg_mie$write_1__SEL_1 =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h104 ||
	      write_csr_csr_addr == 12'h304) ;
  assign MUX_rg_mip$write_1__SEL_5 =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h144 ||
	      write_csr_csr_addr == 12'h344) ;
  assign MUX_rg_mstatus$write_1__SEL_2 =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h100 ||
	      write_csr_csr_addr == 12'h300) ;
  assign MUX_rg_mtvec$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h305 ;
  assign MUX_rg_satp$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h180 ;
  assign MUX_rg_scause$write_1__SEL_2 =
	     EN_write_csr && write_csr_csr_addr == 12'h142 ;
  assign MUX_rg_scause$write_1__SEL_3 =
	     EN_csr_trap_actions && x__h60704 != 2'b11 ;
  assign MUX_rg_sepcc$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h141 ;
  assign MUX_rg_sepcc$write_1__SEL_2 =
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd15 ;
  assign MUX_rg_stvec$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h105 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'hB02 ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { write_csr_word[63], write_csr_word[4:0] } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { csr_trap_actions_interrupt, csr_trap_actions_exc_code } ;
  assign MUX_rg_medeleg$write_1__VAL_1 =
	     { write_csr_word[15],
	       1'd0,
	       write_csr_word[13:12],
	       2'd0,
	       write_csr_word[9:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_2 = { 65'd0, csr_trap_actions_pc } ;
  assign MUX_rg_mie$write_1__VAL_1 =
	     (write_csr_csr_addr == 12'h104) ?
	       unchanged_bits__h39508 | changed_bits__h42765 :
	       { write_csr_word[11],
		 1'b0,
		 write_csr_word[9:7],
		 1'b0,
		 write_csr_word[5:3],
		 1'b0,
		 write_csr_word[1:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ? write_csr_word : 64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mip$write_1__VAL_2 =
	     { rg_mip[11:4], f_si_reqs$D_OUT, rg_mip[2:0] } ;
  assign MUX_rg_mip$write_1__VAL_3 =
	     { rg_mip[11:8], f_ti_reqs$D_OUT, rg_mip[6:0] } ;
  assign MUX_rg_mip$write_1__VAL_4 = { f_ei_reqs$D_OUT, rg_mip[10:0] } ;
  assign MUX_rg_mip$write_1__VAL_5 =
	     (write_csr_csr_addr == 12'h144) ?
	       unchanged_bits__h42764 | changed_bits__h42765 :
	       { rg_mip[11:10],
		 write_csr_word[9:8],
		 rg_mip[7:6],
		 write_csr_word[5:4],
		 rg_mip[3:2],
		 write_csr_word[1:0] } ;
  assign MUX_rg_mstatus$write_1__VAL_2 =
	     (write_csr_csr_addr == 12'h100) ?
	       { rg_mstatus[25:24],
		 2'd2,
		 rg_mstatus[21:19],
		 write_csr_word[19:18],
		 rg_mstatus[16],
		 write_csr_word[16:13],
		 rg_mstatus[11:10],
		 x__h45468,
		 rg_mstatus[7:6],
		 write_csr_word[5],
		 1'd0,
		 rg_mstatus[3:2],
		 write_csr_word[1],
		 1'd0 } :
	       { 4'd10,
		 write_csr_word[22:11],
		 x__h45468,
		 write_csr_word[7],
		 1'b0,
		 write_csr_word[5],
		 1'd0,
		 write_csr_word[3],
		 1'b0,
		 write_csr_word[1],
		 1'd0 } ;
  assign MUX_rg_mstatus$write_1__VAL_3 =
	     { rg_mstatus[25:12],
	       x__h60841,
	       x__h60843,
	       csr_ret_actions_from_priv == 2'b11 || rg_mstatus[7],
	       csr_ret_actions_from_priv == 2'b10 || rg_mstatus[6],
	       csr_ret_actions_from_priv == 2'b01 || rg_mstatus[5],
	       csr_ret_actions_from_priv == 2'b0 || rg_mstatus[4],
	       IF_csr_ret_actions_from_priv_EQ_0b11_385_THEN__ETC___d1399,
	       IF_csr_ret_actions_from_priv_EQ_0b10_389_THEN__ETC___d1400,
	       IF_csr_ret_actions_from_priv_EQ_0b1_392_THEN_S_ETC___d1402,
	       IF_csr_ret_actions_from_priv_EQ_0b0_394_THEN_S_ETC___d1403 } ;
  assign MUX_rg_mstatus$write_1__VAL_4 =
	     { rg_mstatus[25:12],
	       new_mstatus_mpp__h59122,
	       new_mstatus_spp__h59123,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1225,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1228,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1231,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1234,
	       x__h60704 != 2'b11 && rg_mstatus[3],
	       x__h60704 != 2'd2 && rg_mstatus[2],
	       x__h60704 != 2'd1 && rg_mstatus[1],
	       x__h60704 != 2'd0 && rg_mstatus[0] } ;
  assign MUX_rg_mtvec$write_1__VAL_1 =
	     { write_csr_word[63:2], write_csr_word[0] } ;
  assign MUX_rg_sepcc$write_1__VAL_1 = { 65'd0, write_csr_word } ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register rg_ccsr
  assign rg_ccsr$D_IN = 129'h0 ;
  assign rg_ccsr$EN = 1'b0 ;

  // register rg_dcsr
  assign rg_dcsr$D_IN = 32'h0 ;
  assign rg_dcsr$EN = 1'b0 ;

  // register rg_dpc
  assign rg_dpc$D_IN = 64'h0 ;
  assign rg_dpc$EN = 1'b0 ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = 64'h0 ;
  assign rg_dscratch0$EN = 1'b0 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = 64'h0 ;
  assign rg_dscratch1$EN = 1'b0 ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_mcause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 6'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_mcause$write_1__SEL_3:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_csr_trap_actions && x__h60704 == 2'b11 ||
	     EN_write_csr && write_csr_csr_addr == 12'h342 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ? write_csr_word[2:0] : 3'd0 ;
  assign rg_mcounteren$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h306 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_medeleg
  assign rg_medeleg$D_IN =
	     MUX_rg_medeleg$write_1__SEL_1 ?
	       MUX_rg_medeleg$write_1__VAL_1 :
	       16'd0 ;
  assign rg_medeleg$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h302 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mepcc
  assign rg_mepcc$D_IN =
	     MUX_rg_mepcc$write_1__SEL_1 ?
	       write_csr_cap_value :
	       MUX_rg_mepcc$write_1__VAL_2 ;
  assign rg_mepcc$EN =
	     EN_csr_trap_actions && x__h60704 == 2'b11 ||
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd31 ;

  // register rg_mideleg
  assign rg_mideleg$D_IN =
	     MUX_rg_mideleg$write_1__SEL_1 ? write_csr_word[11:0] : 12'd0 ;
  assign rg_mideleg$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h303 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mie
  assign rg_mie$D_IN =
	     MUX_rg_mie$write_1__SEL_1 ? MUX_rg_mie$write_1__VAL_1 : 12'd0 ;
  assign rg_mie$EN =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h104 ||
	      write_csr_csr_addr == 12'h304) ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mip
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_record_software_interrupt or
	  MUX_rg_mip$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_record_timer_interrupt_req or
	  MUX_rg_mip$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_record_external_interrupt or
	  MUX_rg_mip$write_1__VAL_4 or
	  MUX_rg_mip$write_1__SEL_5 or MUX_rg_mip$write_1__VAL_5)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mip$D_IN = 12'd0;
    WILL_FIRE_RL_rl_record_software_interrupt:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_2;
    WILL_FIRE_RL_rl_record_timer_interrupt_req:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_3;
    WILL_FIRE_RL_rl_record_external_interrupt:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_4;
    MUX_rg_mip$write_1__SEL_5: rg_mip$D_IN = MUX_rg_mip$write_1__VAL_5;
    default: rg_mip$D_IN = 12'b101010101010 /* unspecified value */ ;
  endcase
  assign rg_mip$EN =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h144 ||
	      write_csr_csr_addr == 12'h344) ||
	     WILL_FIRE_RL_rl_record_external_interrupt ||
	     WILL_FIRE_RL_rl_record_timer_interrupt_req ||
	     WILL_FIRE_RL_rl_record_software_interrupt ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = write_csr_word ;
  assign rg_mscratch$EN = EN_write_csr && write_csr_csr_addr == 12'h340 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN = write_csr_cap_value ;
  assign rg_mscratchc$EN =
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd30 ;

  // register rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mstatus$write_1__SEL_2 or
	  MUX_rg_mstatus$write_1__VAL_2 or
	  EN_csr_ret_actions or
	  MUX_rg_mstatus$write_1__VAL_3 or
	  EN_csr_trap_actions or MUX_rg_mstatus$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mstatus$D_IN = 26'd41943040;
    MUX_rg_mstatus$write_1__SEL_2:
	rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_2;
    EN_csr_ret_actions: rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_3;
    EN_csr_trap_actions: rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_4;
    default: rg_mstatus$D_IN =
		 26'b10101010101010101010101010 /* unspecified value */ ;
  endcase
  assign rg_mstatus$EN =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'h100 ||
	      write_csr_csr_addr == 12'h300) ||
	     EN_csr_trap_actions ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtcc
  assign rg_mtcc$D_IN = write_csr_cap_value ;
  assign rg_mtcc$EN = EN_write_csr_cap && write_csr_cap_cap_addr == 5'd28 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mcause$write_1__SEL_3 ?
	       csr_trap_actions_xtval :
	       write_csr_word ;
  assign rg_mtval$EN =
	     EN_csr_trap_actions && x__h60704 == 2'b11 ||
	     EN_write_csr && write_csr_csr_addr == 12'h343 ;

  // register rg_mtvec
  assign rg_mtvec$D_IN =
	     MUX_rg_mtvec$write_1__SEL_1 ?
	       MUX_rg_mtvec$write_1__VAL_1 :
	       63'd2048 ;
  assign rg_mtvec$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h305 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_satp
  assign rg_satp$D_IN = MUX_rg_satp$write_1__SEL_1 ? write_csr_word : 64'd0 ;
  assign rg_satp$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h180 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_scause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_scause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_scause$D_IN = 6'd0;
    MUX_rg_scause$write_1__SEL_2:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    MUX_rg_scause$write_1__SEL_3:
	rg_scause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_scause$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign rg_scause$EN =
	     EN_csr_trap_actions && x__h60704 != 2'b11 ||
	     EN_write_csr && write_csr_csr_addr == 12'h142 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_sepcc
  always@(MUX_rg_sepcc$write_1__SEL_1 or
	  MUX_rg_sepcc$write_1__VAL_1 or
	  MUX_rg_sepcc$write_1__SEL_2 or
	  write_csr_cap_value or
	  MUX_rg_scause$write_1__SEL_3 or MUX_rg_mepcc$write_1__VAL_2)
  case (1'b1)
    MUX_rg_sepcc$write_1__SEL_1: rg_sepcc$D_IN = MUX_rg_sepcc$write_1__VAL_1;
    MUX_rg_sepcc$write_1__SEL_2: rg_sepcc$D_IN = write_csr_cap_value;
    MUX_rg_scause$write_1__SEL_3: rg_sepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    default: rg_sepcc$D_IN =
		 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sepcc$EN =
	     EN_csr_trap_actions && x__h60704 != 2'b11 ||
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd15 ||
	     EN_write_csr && write_csr_csr_addr == 12'h141 ;

  // register rg_sscratch
  assign rg_sscratch$D_IN = write_csr_word ;
  assign rg_sscratch$EN = EN_write_csr && write_csr_csr_addr == 12'h140 ;

  // register rg_sscratchc
  assign rg_sscratchc$D_IN = write_csr_cap_value ;
  assign rg_sscratchc$EN =
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd14 ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_stcc
  assign rg_stcc$D_IN = write_csr_cap_value ;
  assign rg_stcc$EN = EN_write_csr_cap && write_csr_cap_cap_addr == 5'd12 ;

  // register rg_stval
  assign rg_stval$D_IN =
	     MUX_rg_scause$write_1__SEL_3 ?
	       csr_trap_actions_xtval :
	       write_csr_word ;
  assign rg_stval$EN =
	     EN_csr_trap_actions && x__h60704 != 2'b11 ||
	     EN_write_csr && write_csr_csr_addr == 12'h143 ;

  // register rg_stvec
  assign rg_stvec$D_IN =
	     MUX_rg_stvec$write_1__SEL_1 ?
	       MUX_rg_mtvec$write_1__VAL_1 :
	       63'd2048 ;
  assign rg_stvec$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h105 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata1
  assign rg_tdata1$D_IN = write_csr_word ;
  assign rg_tdata1$EN = EN_write_csr && write_csr_csr_addr == 12'h7A1 ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = write_csr_word ;
  assign rg_tdata2$EN = EN_write_csr && write_csr_csr_addr == 12'h7A2 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = write_csr_word ;
  assign rg_tdata3$EN = EN_write_csr && write_csr_csr_addr == 12'h7A3 ;

  // register rg_tselect
  assign rg_tselect$D_IN = write_csr_word ;
  assign rg_tselect$EN = EN_write_csr && write_csr_csr_addr == 12'h7A0 ;

  // register rg_uepcc
  assign rg_uepcc$D_IN = write_csr_cap_value ;
  assign rg_uepcc$EN = EN_write_csr_cap && write_csr_cap_cap_addr == 5'h07 ;

  // register rg_uscratchc
  assign rg_uscratchc$D_IN = write_csr_cap_value ;
  assign rg_uscratchc$EN =
	     EN_write_csr_cap && write_csr_cap_cap_addr == 5'd6 ;

  // register rg_utcc
  assign rg_utcc$D_IN = write_csr_cap_value ;
  assign rg_utcc$EN = EN_write_csr_cap && write_csr_cap_cap_addr == 5'd4 ;

  // submodule f_ei_reqs
  assign f_ei_reqs$D_IN = external_interrupt_req_set_not_clear ;
  assign f_ei_reqs$ENQ = EN_external_interrupt_req ;
  assign f_ei_reqs$DEQ = WILL_FIRE_RL_rl_record_external_interrupt ;
  assign f_ei_reqs$CLR = WILL_FIRE_RL_rl_reset_start ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_si_reqs
  assign f_si_reqs$D_IN = software_interrupt_req_set_not_clear ;
  assign f_si_reqs$ENQ = EN_software_interrupt_req ;
  assign f_si_reqs$DEQ = WILL_FIRE_RL_rl_record_software_interrupt ;
  assign f_si_reqs$CLR = WILL_FIRE_RL_rl_reset_start ;

  // submodule f_ti_reqs
  assign f_ti_reqs$D_IN = timer_interrupt_req_set_not_clear ;
  assign f_ti_reqs$ENQ = EN_timer_interrupt_req ;
  assign f_ti_reqs$DEQ = WILL_FIRE_RL_rl_record_timer_interrupt_req ;
  assign f_ti_reqs$CLR = WILL_FIRE_RL_rl_reset_start ;

  // remaining internal signals
  assign IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1225 =
	     (x__h60704 == 2'b11) ? n__h59371 : rg_mstatus[7] ;
  assign IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1228 =
	     (x__h60704 == 2'd2) ? n__h59371 : rg_mstatus[6] ;
  assign IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1231 =
	     (x__h60704 == 2'd1) ? n__h59371 : rg_mstatus[5] ;
  assign IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1234 =
	     (x__h60704 == 2'd0) ? n__h59371 : rg_mstatus[4] ;
  assign IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1633 =
	     (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558 &&
	      NOT_rg_mip_4_BIT_3_456_559_OR_NOT_rg_mie_2_BIT_ETC___d1566 &&
	      NOT_rg_mip_4_BIT_7_467_568_OR_NOT_rg_mie_2_BIT_ETC___d1575) ?
	       5'd9 :
	       ((NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558 &&
		 NOT_rg_mip_4_BIT_3_456_559_OR_NOT_rg_mie_2_BIT_ETC___d1566) ?
		  5'd7 :
		  (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558 ?
		     5'd3 :
		     5'd11)) ;
  assign IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1635 =
	     (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585 &&
	      NOT_rg_mip_4_BIT_1_489_586_OR_NOT_rg_mie_2_BIT_ETC___d1593) ?
	       5'd5 :
	       (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585 ?
		  5'd1 :
		  IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1633) ;
  assign IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1636 =
	     (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585 &&
	      NOT_rg_mip_4_BIT_1_489_586_OR_NOT_rg_mie_2_BIT_ETC___d1593 &&
	      NOT_rg_mip_4_BIT_5_500_595_OR_NOT_rg_mie_2_BIT_ETC___d1602) ?
	       5'd8 :
	       IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1635 ;
  assign IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1638 =
	     (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1612 &&
	      NOT_rg_mip_4_BIT_0_522_613_OR_NOT_rg_mie_2_BIT_ETC___d1620) ?
	       5'd4 :
	       (NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1612 ?
		  5'd0 :
		  IF_NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_ETC___d1636) ;
  assign IF_csr_ret_actions_from_priv_EQ_0b0_394_THEN_S_ETC___d1403 =
	     (csr_ret_actions_from_priv == 2'b0) ? n__h61402 : rg_mstatus[0] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b10_389_THEN__ETC___d1400 =
	     (csr_ret_actions_from_priv == 2'b10) ?
	       n__h61402 :
	       rg_mstatus[2] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_385_THEN__ETC___d1399 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       n__h61402 :
	       rg_mstatus[3] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b1_392_THEN_S_ETC___d1402 =
	     (csr_ret_actions_from_priv == 2'b01) ?
	       n__h61402 :
	       rg_mstatus[1] ;
  assign IF_rg_mstatus_BIT_8_THEN_0b1_ELSE_0b0__q1 =
	     rg_mstatus[8] ? 2'b01 : 2'b0 ;
  assign NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_NOT_cs_ETC___d1372 =
	     NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	     !csr_trap_actions_interrupt &&
	     csr_trap_actions_exc_code != 5'd0 &&
	     csr_trap_actions_exc_code != 5'd1 &&
	     csr_trap_actions_exc_code != 5'd2 &&
	     csr_trap_actions_exc_code != 5'd3 &&
	     csr_trap_actions_exc_code != 5'd4 &&
	     csr_trap_actions_exc_code != 5'd5 &&
	     csr_trap_actions_exc_code != 5'd6 &&
	     csr_trap_actions_exc_code != 5'd7 &&
	     csr_trap_actions_exc_code != 5'd8 &&
	     csr_trap_actions_exc_code != 5'd9 &&
	     csr_trap_actions_exc_code != 5'd11 &&
	     csr_trap_actions_exc_code != 5'd12 &&
	     csr_trap_actions_exc_code != 5'd13 &&
	     csr_trap_actions_exc_code != 5'd15 ;
  assign NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_csr_tr_ETC___d1322 =
	     NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	     csr_trap_actions_interrupt &&
	     csr_trap_actions_exc_code != 5'd0 &&
	     csr_trap_actions_exc_code != 5'd1 &&
	     csr_trap_actions_exc_code != 5'd2 &&
	     csr_trap_actions_exc_code != 5'd3 &&
	     csr_trap_actions_exc_code != 5'd4 &&
	     csr_trap_actions_exc_code != 5'd5 &&
	     csr_trap_actions_exc_code != 5'd6 &&
	     csr_trap_actions_exc_code != 5'd7 &&
	     csr_trap_actions_exc_code != 5'd8 &&
	     csr_trap_actions_exc_code != 5'd9 &&
	     csr_trap_actions_exc_code != 5'd10 &&
	     csr_trap_actions_exc_code != 5'd11 ;
  assign NOT_cfg_verbosity_read__7_ULE_1_8___d19 = cfg_verbosity > 4'd1 ;
  assign NOT_rg_mip_4_BIT_0_522_613_OR_NOT_rg_mie_2_BIT_ETC___d1620 =
	     !rg_mip[0] || !rg_mie[0] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1527 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1528 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558 =
	     !rg_mip[11] || !rg_mie[11] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1445 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1446 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585 =
	     NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1558 &&
	     NOT_rg_mip_4_BIT_3_456_559_OR_NOT_rg_mie_2_BIT_ETC___d1566 &&
	     NOT_rg_mip_4_BIT_7_467_568_OR_NOT_rg_mie_2_BIT_ETC___d1575 &&
	     NOT_rg_mip_4_BIT_9_478_577_OR_NOT_rg_mie_2_BIT_ETC___d1584 ;
  assign NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1612 =
	     NOT_rg_mip_4_BIT_11_440_544_OR_NOT_rg_mie_2_BI_ETC___d1585 &&
	     NOT_rg_mip_4_BIT_1_489_586_OR_NOT_rg_mie_2_BIT_ETC___d1593 &&
	     NOT_rg_mip_4_BIT_5_500_595_OR_NOT_rg_mie_2_BIT_ETC___d1602 &&
	     NOT_rg_mip_4_BIT_8_511_604_OR_NOT_rg_mie_2_BIT_ETC___d1611 ;
  assign NOT_rg_mip_4_BIT_1_489_586_OR_NOT_rg_mie_2_BIT_ETC___d1593 =
	     !rg_mip[1] || !rg_mie[1] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1494 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1495 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_3_456_559_OR_NOT_rg_mie_2_BIT_ETC___d1566 =
	     !rg_mip[3] || !rg_mie[3] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1461 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1462 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_5_500_595_OR_NOT_rg_mie_2_BIT_ETC___d1602 =
	     !rg_mip[5] || !rg_mie[5] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1505 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1506 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_7_467_568_OR_NOT_rg_mie_2_BIT_ETC___d1575 =
	     !rg_mip[7] || !rg_mie[7] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1472 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1473 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_8_511_604_OR_NOT_rg_mie_2_BIT_ETC___d1611 =
	     !rg_mip[8] || !rg_mie[8] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1516 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1517 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign NOT_rg_mip_4_BIT_9_478_577_OR_NOT_rg_mie_2_BIT_ETC___d1584 =
	     !rg_mip[9] || !rg_mie[9] ||
	     !interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1483 &&
	     (!interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1484 ||
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555) ;
  assign _theResult____h63051 = rg_mideleg[11] ? 2'b01 : 2'b11 ;
  assign _theResult____h65414 = rg_mideleg[3] ? 2'b01 : 2'b11 ;
  assign _theResult____h65624 = rg_mideleg[7] ? 2'b01 : 2'b11 ;
  assign _theResult____h65834 = rg_mideleg[9] ? 2'b01 : 2'b11 ;
  assign _theResult____h66044 = rg_mideleg[1] ? 2'b01 : 2'b11 ;
  assign _theResult____h66254 = rg_mideleg[5] ? 2'b01 : 2'b11 ;
  assign _theResult____h66464 = rg_mideleg[8] ? 2'b01 : 2'b11 ;
  assign _theResult____h66674 = rg_mideleg[0] ? 2'b01 : 2'b11 ;
  assign _theResult____h66884 = rg_mideleg[4] ? 2'b01 : 2'b11 ;
  assign _theResult___fst__h58982 =
	     (csr_trap_actions_interrupt ?
		deleg_bit___1__h59043 :
		deleg_bit___1__h59058) ?
	       2'b01 :
	       2'b11 ;
  assign changed_bits__h42765 = write_csr_word[11:0] & mask__h42763 ;
  assign csr_trap_actions_interrupt_AND_IF_IF_csr_trap__ETC___d1251 =
	     csr_trap_actions_interrupt &&
	     ((x__h60704 == 2'b11) ? rg_mtvec[0] : rg_stvec[0]) ;
  assign deleg_bit___1__h59043 = rg_mideleg[csr_trap_actions_exc_code[3:0]] ;
  assign deleg_bit___1__h59058 = rg_medeleg[csr_trap_actions_exc_code[3:0]] ;
  assign exc_pc___1__h60120 = exc_pc__h60060 + vector_offset__h60061 ;
  assign exc_pc__h60060 = { x__h60123, 2'd0 } ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1446 =
	     interrupt_pending_cur_priv == _theResult____h63051 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1462 =
	     interrupt_pending_cur_priv == _theResult____h65414 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1473 =
	     interrupt_pending_cur_priv == _theResult____h65624 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1484 =
	     interrupt_pending_cur_priv == _theResult____h65834 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1495 =
	     interrupt_pending_cur_priv == _theResult____h66044 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1506 =
	     interrupt_pending_cur_priv == _theResult____h66254 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1517 =
	     interrupt_pending_cur_priv == _theResult____h66464 ;
  assign interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1528 =
	     interrupt_pending_cur_priv == _theResult____h66674 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1445 =
	     interrupt_pending_cur_priv < _theResult____h63051 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1461 =
	     interrupt_pending_cur_priv < _theResult____h65414 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1472 =
	     interrupt_pending_cur_priv < _theResult____h65624 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1483 =
	     interrupt_pending_cur_priv < _theResult____h65834 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1494 =
	     interrupt_pending_cur_priv < _theResult____h66044 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1505 =
	     interrupt_pending_cur_priv < _theResult____h66254 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1516 =
	     interrupt_pending_cur_priv < _theResult____h66464 ;
  assign interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1527 =
	     interrupt_pending_cur_priv < _theResult____h66674 ;
  assign mask__h42763 =
	     { 2'd0,
	       rg_mideleg[9:8],
	       2'd0,
	       rg_mideleg[5:4],
	       2'd0,
	       rg_mideleg[1:0] } ;
  assign new_mip_w__h14574 =
	     { 52'd0, rg_mip[11:8], f_ti_reqs$D_OUT, rg_mip[6:0] } ;
  assign new_mip_w__h18718 =
	     { 52'd0, rg_mip[11:4], f_si_reqs$D_OUT, rg_mip[2:0] } ;
  assign new_mip_w__h9828 = { 52'd0, f_ei_reqs$D_OUT, rg_mip[10:0] } ;
  assign new_mstatus_mpp__h59122 =
	     (x__h60704 == 2'b11) ?
	       csr_trap_actions_from_priv :
	       rg_mstatus[11:10] ;
  assign new_mstatus_spp__h59123 =
	     (x__h60704 == 2'b11) ?
	       rg_mstatus[9:8] :
	       csr_trap_actions_from_priv ;
  assign old_mip_w__h9827 = { 52'd0, rg_mip } ;
  assign rg_mip_4_BIT_0_522_AND_rg_mie_2_BIT_0_523_524__ETC___d1531 =
	     rg_mip[0] && rg_mie[0] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1527 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1528 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1455 =
	     rg_mip[11] && rg_mie[11] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1445 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1446 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1521 =
	     rg_mip_4_BIT_11_440_AND_rg_mie_2_BIT_11_441_44_ETC___d1455 ||
	     rg_mip_4_BIT_3_456_AND_rg_mie_2_BIT_3_457_458__ETC___d1465 ||
	     rg_mip_4_BIT_7_467_AND_rg_mie_2_BIT_7_468_469__ETC___d1476 ||
	     rg_mip_4_BIT_9_478_AND_rg_mie_2_BIT_9_479_480__ETC___d1487 ||
	     rg_mip_4_BIT_1_489_AND_rg_mie_2_BIT_1_490_491__ETC___d1498 ||
	     rg_mip_4_BIT_5_500_AND_rg_mie_2_BIT_5_501_502__ETC___d1509 ||
	     rg_mip_4_BIT_8_511_AND_rg_mie_2_BIT_8_512_513__ETC___d1520 ;
  assign rg_mip_4_BIT_1_489_AND_rg_mie_2_BIT_1_490_491__ETC___d1498 =
	     rg_mip[1] && rg_mie[1] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1494 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1495 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_3_456_AND_rg_mie_2_BIT_3_457_458__ETC___d1465 =
	     rg_mip[3] && rg_mie[3] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1461 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1462 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_4_533_AND_rg_mie_2_BIT_4_534_535__ETC___d1542 =
	     rg_mip[4] && rg_mie[4] &&
	     (interrupt_pending_cur_priv < _theResult____h66884 ||
	      interrupt_pending_cur_priv == _theResult____h66884 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_5_500_AND_rg_mie_2_BIT_5_501_502__ETC___d1509 =
	     rg_mip[5] && rg_mie[5] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1505 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1506 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_7_467_AND_rg_mie_2_BIT_7_468_469__ETC___d1476 =
	     rg_mip[7] && rg_mie[7] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1472 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1473 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_8_511_AND_rg_mie_2_BIT_8_512_513__ETC___d1520 =
	     rg_mip[8] && rg_mie[8] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1516 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1517 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign rg_mip_4_BIT_9_478_AND_rg_mie_2_BIT_9_479_480__ETC___d1487 =
	     rg_mip[9] && rg_mie[9] &&
	     (interrupt_pending_cur_priv_ULT_IF_rg_mideleg_2_ETC___d1483 ||
	      interrupt_pending_cur_priv_EQ_IF_rg_mideleg_24_ETC___d1484 &&
	      IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452) ;
  assign unchanged_bits__h39508 = rg_mie & y__h42912 ;
  assign unchanged_bits__h42764 = rg_mip & y__h42912 ;
  assign vector_offset__h60061 = { 57'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign x__h22985 = rg_mie & mask__h42763 ;
  assign x__h24044 = rg_mip & mask__h42763 ;
  assign x__h45468 = write_csr_word[8] ? 2'b01 : 2'b0 ;
  assign x__h52584 =
	     csr_trap_actions_interrupt_AND_IF_IF_csr_trap__ETC___d1251 ?
	       exc_pc___1__h60120 :
	       exc_pc__h60060 ;
  assign x__h60123 = (x__h60704 == 2'b11) ? rg_mtvec[62:1] : rg_stvec[62:1] ;
  assign x__h60532 =
	     { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
	       27'd0,
	       rg_mstatus[25:22],
	       9'b0,
	       rg_mstatus[21:12],
	       new_mstatus_mpp__h59122,
	       2'b0,
	       new_mstatus_spp__h59123[0],
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1225,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1228,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1231,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1234,
	       x__h60704 != 2'b11 && rg_mstatus[3],
	       x__h60704 != 2'd2 && rg_mstatus[2],
	       x__h60704 != 2'd1 && rg_mstatus[1],
	       x__h60704 != 2'd0 && rg_mstatus[0] } ;
  assign x__h60700 =
	     { csr_trap_actions_interrupt,
	       58'd0,
	       csr_trap_actions_exc_code } ;
  assign x__h60704 =
	     (csr_trap_actions_from_priv == 2'b11) ?
	       csr_trap_actions_from_priv :
	       _theResult___fst__h58982 ;
  assign x__h60720 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mepcc[63:0] :
	       rg_sepcc[63:0] ;
  assign x__h60841 =
	     (csr_ret_actions_from_priv == 2'b11) ? 2'b0 : rg_mstatus[11:10] ;
  assign x__h60843 =
	     (csr_ret_actions_from_priv == 2'b11) ? rg_mstatus[9:8] : 2'b0 ;
  assign x__h61627 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mstatus[11:10] :
	       rg_mstatus[9:8] ;
  assign x__h61630 =
	     { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
	       27'd0,
	       rg_mstatus[25:22],
	       9'b0,
	       rg_mstatus[21:12],
	       x__h60841,
	       2'b0,
	       x__h60843[0],
	       csr_ret_actions_from_priv == 2'b11 || rg_mstatus[7],
	       csr_ret_actions_from_priv == 2'b10 || rg_mstatus[6],
	       csr_ret_actions_from_priv == 2'b01 || rg_mstatus[5],
	       csr_ret_actions_from_priv == 2'b0 || rg_mstatus[4],
	       IF_csr_ret_actions_from_priv_EQ_0b11_385_THEN__ETC___d1399,
	       IF_csr_ret_actions_from_priv_EQ_0b10_389_THEN__ETC___d1400,
	       IF_csr_ret_actions_from_priv_EQ_0b1_392_THEN_S_ETC___d1402,
	       IF_csr_ret_actions_from_priv_EQ_0b0_394_THEN_S_ETC___d1403 } ;
  assign y__h42912 =
	     { 2'd3,
	       ~rg_mideleg[9:8],
	       2'd3,
	       ~rg_mideleg[5:4],
	       2'd3,
	       ~rg_mideleg[1:0] } ;
  always@(csr_ret_actions_from_priv or rg_mstatus)
  begin
    case (csr_ret_actions_from_priv)
      2'd0: n__h61402 = rg_mstatus[4];
      2'd1: n__h61402 = rg_mstatus[5];
      2'd2: n__h61402 = rg_mstatus[6];
      2'd3: n__h61402 = rg_mstatus[7];
    endcase
  end
  always@(x__h60704 or rg_mstatus)
  begin
    case (x__h60704)
      2'd0: n__h59371 = rg_mstatus[0];
      2'd1: n__h59371 = rg_mstatus[1];
      2'd2: n__h59371 = rg_mstatus[2];
      2'd3: n__h59371 = rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452 =
	      rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452 =
	      rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1452 =
		   interrupt_pending_cur_priv == 2'b11 && rg_mstatus[3];
    endcase
  end
  always@(interrupt_pending_cur_priv or rg_mstatus)
  begin
    case (interrupt_pending_cur_priv)
      2'b0:
	  IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555 =
	      !rg_mstatus[0];
      2'b01:
	  IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555 =
	      !rg_mstatus[1];
      default: IF_interrupt_pending_cur_priv_EQ_0b0_447_THEN__ETC___d1555 =
		   interrupt_pending_cur_priv != 2'b11 || !rg_mstatus[3];
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_tdata3 or
	  rg_mstatus or
	  x__h22985 or
	  rg_stvec or
	  rg_sscratch or
	  rg_sepcc or
	  rg_scause or
	  rg_stval or
	  x__h24044 or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepcc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h9827 or
	  rg_tselect or rg_tdata1 or rg_tdata2 or rg_mcycle or rg_minstret)
  begin
    case (read_csr_csr_addr)
      12'h100:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		29'h0,
		rg_mstatus[23:22],
		12'h0,
		rg_mstatus[18:17],
		1'h0,
		rg_mstatus[15:12],
		4'h0,
		rg_mstatus[8],
		2'h0,
		rg_mstatus[5:4],
		2'h0,
		rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 = 64'd0;
      12'h104:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 52'd0, x__h22985 };
      12'h105:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_stvec[62:1], 1'b0, rg_stvec[0] };
      12'h140:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_sepcc[63:0];
      12'h142:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_scause[5], 58'd0, rg_scause[4:0] };
      12'h143:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_stval;
      12'h144:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 52'd0, x__h24044 };
      12'h180:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 = rg_satp;
      12'h300:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		27'd0,
		rg_mstatus[25:22],
		9'b0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      64'h8000000000140100;
      12'h302:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 48'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 52'd0, rg_mie };
      12'h305:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_mtvec[62:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_mepcc[63:0];
      12'h342:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      { rg_mcause[5], 58'd0, rg_mcause[4:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      old_mip_w__h9827;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
	      rg_minstret;
      default: IF_read_csr_csr_addr_EQ_0xC00_9_THEN_rg_mcycle_ETC___d308 =
		   rg_tdata3;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_tdata3 or
	  rg_mstatus or
	  x__h22985 or
	  rg_stvec or
	  rg_sscratch or
	  rg_sepcc or
	  rg_scause or
	  rg_stval or
	  x__h24044 or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepcc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h9827 or
	  rg_tselect or rg_tdata1 or rg_tdata2 or rg_mcycle or rg_minstret)
  begin
    case (read_csr_port2_csr_addr)
      12'h100:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		29'h0,
		rg_mstatus[23:22],
		12'h0,
		rg_mstatus[18:17],
		1'h0,
		rg_mstatus[15:12],
		4'h0,
		rg_mstatus[8],
		2'h0,
		rg_mstatus[5:4],
		2'h0,
		rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 = 64'd0;
      12'h104:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 52'd0, x__h22985 };
      12'h105:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_stvec[62:1], 1'b0, rg_stvec[0] };
      12'h140:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_sscratch;
      12'h141:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_sepcc[63:0];
      12'h142:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_scause[5], 58'd0, rg_scause[4:0] };
      12'h143:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_stval;
      12'h144:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 52'd0, x__h24044 };
      12'h180:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 = rg_satp;
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		27'd0,
		rg_mstatus[25:22],
		9'b0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      64'h8000000000140100;
      12'h302:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 48'd0, rg_medeleg };
      12'h303:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 52'd0, rg_mie };
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_mtvec[62:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_mepcc[63:0];
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      { rg_mcause[5], 58'd0, rg_mcause[4:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      old_mip_w__h9827;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
	      rg_minstret;
      default: IF_read_csr_port2_csr_addr_EQ_0xC00_23_THEN_rg_ETC___d513 =
		   rg_tdata3;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_tdata3 or
	  rg_mstatus or
	  x__h22985 or
	  rg_stvec or
	  rg_sscratch or
	  rg_sepcc or
	  rg_scause or
	  rg_stval or
	  x__h24044 or
	  rg_satp or
	  rg_medeleg or
	  rg_mideleg or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepcc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h9827 or
	  rg_tselect or rg_tdata1 or rg_tdata2 or rg_mcycle or rg_minstret)
  begin
    case (mav_read_csr_csr_addr)
      12'h100:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		29'h0,
		rg_mstatus[23:22],
		12'h0,
		rg_mstatus[18:17],
		1'h0,
		rg_mstatus[15:12],
		4'h0,
		rg_mstatus[8],
		2'h0,
		rg_mstatus[5:4],
		2'h0,
		rg_mstatus[1:0] };
      12'h102, 12'h103, 12'h106, 12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 = 64'd0;
      12'h104:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 52'd0, x__h22985 };
      12'h105:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_stvec[62:1], 1'b0, rg_stvec[0] };
      12'h140:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_sscratch;
      12'h141:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_sepcc[63:0];
      12'h142:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_scause[5], 58'd0, rg_scause[4:0] };
      12'h143:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_stval;
      12'h144:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 52'd0, x__h24044 };
      12'h180:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 = rg_satp;
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		27'd0,
		rg_mstatus[25:22],
		9'b0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      64'h8000000000140100;
      12'h302:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 48'd0, rg_medeleg };
      12'h303:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 52'd0, rg_mideleg };
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 52'd0, rg_mie };
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_mtvec[62:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { 61'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_mepcc[63:0];
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      { rg_mcause[5], 58'd0, rg_mcause[4:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      old_mip_w__h9827;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_tdata2;
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_mcycle;
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
	      rg_minstret;
      default: IF_mav_read_csr_csr_addr_EQ_0xC00_28_THEN_rg_m_ETC___d718 =
		   rg_tdata3;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_dpc <= `BSV_ASSIGNMENT_DELAY 64'h0000000000001000;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mstatus <= `BSV_ASSIGNMENT_DELAY 26'd41943040;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_dpc$EN) rg_dpc <= `BSV_ASSIGNMENT_DELAY rg_dpc$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mstatus$EN)
	  rg_mstatus <= `BSV_ASSIGNMENT_DELAY rg_mstatus$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_ccsr$EN) rg_ccsr <= `BSV_ASSIGNMENT_DELAY rg_ccsr$D_IN;
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_medeleg$EN) rg_medeleg <= `BSV_ASSIGNMENT_DELAY rg_medeleg$D_IN;
    if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
    if (rg_mideleg$EN) rg_mideleg <= `BSV_ASSIGNMENT_DELAY rg_mideleg$D_IN;
    if (rg_mie$EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie$D_IN;
    if (rg_mip$EN) rg_mip <= `BSV_ASSIGNMENT_DELAY rg_mip$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mscratchc$EN)
      rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
    if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_mtvec$EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_scause$EN) rg_scause <= `BSV_ASSIGNMENT_DELAY rg_scause$D_IN;
    if (rg_sepcc$EN) rg_sepcc <= `BSV_ASSIGNMENT_DELAY rg_sepcc$D_IN;
    if (rg_sscratch$EN) rg_sscratch <= `BSV_ASSIGNMENT_DELAY rg_sscratch$D_IN;
    if (rg_sscratchc$EN)
      rg_sscratchc <= `BSV_ASSIGNMENT_DELAY rg_sscratchc$D_IN;
    if (rg_stcc$EN) rg_stcc <= `BSV_ASSIGNMENT_DELAY rg_stcc$D_IN;
    if (rg_stval$EN) rg_stval <= `BSV_ASSIGNMENT_DELAY rg_stval$D_IN;
    if (rg_stvec$EN) rg_stvec <= `BSV_ASSIGNMENT_DELAY rg_stvec$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
    if (rg_uepcc$EN) rg_uepcc <= `BSV_ASSIGNMENT_DELAY rg_uepcc$D_IN;
    if (rg_uscratchc$EN)
      rg_uscratchc <= `BSV_ASSIGNMENT_DELAY rg_uscratchc$D_IN;
    if (rg_utcc$EN) rg_utcc <= `BSV_ASSIGNMENT_DELAY rg_utcc$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    rg_ccsr = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpc = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch0 = 64'hAAAAAAAAAAAAAAAA;
    rg_dscratch1 = 64'hAAAAAAAAAAAAAAAA;
    rg_mcause = 6'h2A;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_medeleg = 16'hAAAA;
    rg_mepcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mideleg = 12'hAAA;
    rg_mie = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mip = 12'hAAA;
    rg_mscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratchc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mstatus = 26'h2AAAAAA;
    rg_mtcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_mtval = 64'hAAAAAAAAAAAAAAAA;
    rg_mtvec = 63'h2AAAAAAAAAAAAAAA;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_scause = 6'h2A;
    rg_sepcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_sscratch = 64'hAAAAAAAAAAAAAAAA;
    rg_sscratchc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
    rg_stcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_stval = 64'hAAAAAAAAAAAAAAAA;
    rg_stvec = 63'h2AAAAAAAAAAAAAAA;
    rg_tdata1 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata2 = 64'hAAAAAAAAAAAAAAAA;
    rg_tdata3 = 64'hAAAAAAAAAAAAAAAA;
    rg_tselect = 64'hAAAAAAAAAAAAAAAA;
    rg_uepcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_uscratchc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_utcc = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_external_interrupt_req &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile: external_interrupt_req: %x",
		 rg_mcycle,
		 external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_timer_interrupt_req && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_software_interrupt_req &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 csr_trap_actions_pc,
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("    priv %0d: ", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ip: 0x%0h", old_mip_w__h9827);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ie: 0x%0h", { 52'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" edeleg: 0x%0h", 16'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] == 5'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_scause[5] &&
	  rg_scause[4:0] != 5'd0 &&
	  rg_scause[4:0] != 5'd1 &&
	  rg_scause[4:0] != 5'd2 &&
	  rg_scause[4:0] != 5'd3 &&
	  rg_scause[4:0] != 5'd4 &&
	  rg_scause[4:0] != 5'd5 &&
	  rg_scause[4:0] != 5'd6 &&
	  rg_scause[4:0] != 5'd7 &&
	  rg_scause[4:0] != 5'd8 &&
	  rg_scause[4:0] != 5'd9 &&
	  rg_scause[4:0] != 5'd10 &&
	  rg_scause[4:0] != 5'd11)
	$write("unknown interrupt Exc_Code %d", rg_scause[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] == 5'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_scause[5] &&
	  rg_scause[4:0] != 5'd0 &&
	  rg_scause[4:0] != 5'd1 &&
	  rg_scause[4:0] != 5'd2 &&
	  rg_scause[4:0] != 5'd3 &&
	  rg_scause[4:0] != 5'd4 &&
	  rg_scause[4:0] != 5'd5 &&
	  rg_scause[4:0] != 5'd6 &&
	  rg_scause[4:0] != 5'd7 &&
	  rg_scause[4:0] != 5'd8 &&
	  rg_scause[4:0] != 5'd9 &&
	  rg_scause[4:0] != 5'd11 &&
	  rg_scause[4:0] != 5'd12 &&
	  rg_scause[4:0] != 5'd13 &&
	  rg_scause[4:0] != 5'd15)
	$write("unknown trap Exc_Code %d", rg_scause[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" status: 0x%0h",
	       { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		 43'd40960,
		 rg_mstatus[18:17],
		 1'h0,
		 rg_mstatus[15:12],
		 4'd0,
		 IF_rg_mstatus_BIT_8_THEN_0b1_ELSE_0b0__q1[0],
		 2'd0,
		 rg_mstatus[5],
		 3'd0,
		 rg_mstatus[1],
		 1'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tvec: 0x%0h", { rg_stvec[62:1], 1'b0, rg_stvec[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" epc: 0x%0h", rg_sepcc[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tval: 0x%0h", rg_stval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ip: 0x%0h", old_mip_w__h9827);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ie: 0x%0h", { 52'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" edeleg: 0x%0h", rg_medeleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ideleg: 0x%0h", rg_mideleg);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  rg_mcause[5] &&
	  rg_mcause[4:0] != 5'd0 &&
	  rg_mcause[4:0] != 5'd1 &&
	  rg_mcause[4:0] != 5'd2 &&
	  rg_mcause[4:0] != 5'd3 &&
	  rg_mcause[4:0] != 5'd4 &&
	  rg_mcause[4:0] != 5'd5 &&
	  rg_mcause[4:0] != 5'd6 &&
	  rg_mcause[4:0] != 5'd7 &&
	  rg_mcause[4:0] != 5'd8 &&
	  rg_mcause[4:0] != 5'd9 &&
	  rg_mcause[4:0] != 5'd10 &&
	  rg_mcause[4:0] != 5'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] == 5'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !rg_mcause[5] &&
	  rg_mcause[4:0] != 5'd0 &&
	  rg_mcause[4:0] != 5'd1 &&
	  rg_mcause[4:0] != 5'd2 &&
	  rg_mcause[4:0] != 5'd3 &&
	  rg_mcause[4:0] != 5'd4 &&
	  rg_mcause[4:0] != 5'd5 &&
	  rg_mcause[4:0] != 5'd6 &&
	  rg_mcause[4:0] != 5'd7 &&
	  rg_mcause[4:0] != 5'd8 &&
	  rg_mcause[4:0] != 5'd9 &&
	  rg_mcause[4:0] != 5'd11 &&
	  rg_mcause[4:0] != 5'd12 &&
	  rg_mcause[4:0] != 5'd13 &&
	  rg_mcause[4:0] != 5'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[4:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" status: 0x%0h",
	       { rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3,
		 27'd0,
		 rg_mstatus[25:22],
		 9'b0,
		 rg_mstatus[21:10],
		 2'b0,
		 rg_mstatus[8:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tvec: 0x%0h", { rg_mtvec[62:1], 1'b0, rg_mtvec[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" epc: 0x%0h", rg_mepcc[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("    Return: new pc 0x%0h  ", x__h52584);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("MStatus{",
	       "sd:%0d",
	       rg_mstatus[15:14] == 2'h3 || rg_mstatus[13:12] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" sxl:%0d", rg_mstatus[25:24]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" uxl:%0d", rg_mstatus[23:22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tsr:%0d", rg_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tw:%0d", rg_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" tvm:%0d", rg_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" mxr:%0d", rg_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" sum:%0d", rg_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" mprv:%0d", rg_mstatus[16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" xs:%0d", rg_mstatus[15:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" fs:%0d", rg_mstatus[13:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" mpp:%0d", new_mstatus_mpp__h59122);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" spp:%0d", new_mstatus_spp__h59123);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" pies:%0d_%0d%0d",
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1225,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1231,
	       IF_IF_csr_trap_actions_from_priv_EQ_0b11_208_T_ETC___d1234);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" ies:%0d_%0d%0d",
	       x__h60704 != 2'b11 && rg_mstatus[3],
	       x__h60704 != 2'd1 && rg_mstatus[1],
	       x__h60704 != 2'd0 && rg_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_csr_tr_ETC___d1322)
	$write("unknown interrupt Exc_Code %d", csr_trap_actions_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 5'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__7_ULE_1_8_9_AND_NOT_cs_ETC___d1372)
	$write("unknown trap Exc_Code %d", csr_trap_actions_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$write(" new priv %0d", x__h60704);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr &&
	  (write_csr_csr_addr < 12'hB03 || write_csr_csr_addr > 12'hB1F) &&
	  (write_csr_csr_addr < 12'h323 || write_csr_csr_addr > 12'h33F) &&
	  write_csr_csr_addr != 12'h100 &&
	  write_csr_csr_addr != 12'h102 &&
	  write_csr_csr_addr != 12'h103 &&
	  write_csr_csr_addr != 12'h104 &&
	  write_csr_csr_addr != 12'h105 &&
	  write_csr_csr_addr != 12'h106 &&
	  write_csr_csr_addr != 12'h140 &&
	  write_csr_csr_addr != 12'h141 &&
	  write_csr_csr_addr != 12'h142 &&
	  write_csr_csr_addr != 12'h143 &&
	  write_csr_csr_addr != 12'h144 &&
	  write_csr_csr_addr != 12'h180 &&
	  write_csr_csr_addr != 12'h302 &&
	  write_csr_csr_addr != 12'h303 &&
	  write_csr_csr_addr != 12'hF11 &&
	  write_csr_csr_addr != 12'hF12 &&
	  write_csr_csr_addr != 12'hF13 &&
	  write_csr_csr_addr != 12'hF14 &&
	  write_csr_csr_addr != 12'h300 &&
	  write_csr_csr_addr != 12'h301 &&
	  write_csr_csr_addr != 12'h304 &&
	  write_csr_csr_addr != 12'h305 &&
	  write_csr_csr_addr != 12'h306 &&
	  write_csr_csr_addr != 12'h340 &&
	  write_csr_csr_addr != 12'h342 &&
	  write_csr_csr_addr != 12'h343 &&
	  write_csr_csr_addr != 12'h344 &&
	  write_csr_csr_addr != 12'hB00 &&
	  write_csr_csr_addr != 12'hB02 &&
	  write_csr_csr_addr != 12'h7A0 &&
	  write_csr_csr_addr != 12'h7A1 &&
	  write_csr_csr_addr != 12'h7A2 &&
	  write_csr_csr_addr != 12'h7A3 &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 write_csr_csr_addr,
		 write_csr_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_external_interrupt &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile.rl_record_external_interrupt: mip: %0h -> %0h",
		 rg_mcycle,
		 old_mip_w__h9827,
		 new_mip_w__h9828);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_external_interrupt &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("    Current mie = %0h", { 52'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile.rl_record_timer_interrupt_req: mip: %0h -> %0h",
		 rg_mcycle,
		 old_mip_w__h9827,
		 new_mip_w__h14574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("    Current mie = %0h", { 52'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_software_interrupt &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("%0d: CSR_RegFile.rl_record_software_interrupt: mip: %0h -> %0h",
		 rg_mcycle,
		 old_mip_w__h9827,
		 new_mip_w__h18718);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_software_interrupt &&
	  NOT_cfg_verbosity_read__7_ULE_1_8___d19)
	$display("    Current mie = %0h", { 52'd0, rg_mie });
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

