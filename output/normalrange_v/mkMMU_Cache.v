//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Apr 24 20:58:38 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     5 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     1
// req_f3                         I     3
// req_addr                       I    64
// req_st_value                   I    64 reg
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_arready, EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  req_op;
  input  [2 : 0] req_f3;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [4 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_wstrb;
  wire [4 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  wire [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  wire [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [4 : 0] rg_exc_code;
  reg [4 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  wire [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_newrequest
  reg rg_newrequest;
  wire rg_newrequest$D_IN, rg_newrequest$EN;

  // register rg_op
  reg rg_op;
  wire rg_op$D_IN, rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [9 : 0] rg_word64_set_in_cache;
  wire [9 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [51 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [9 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [9 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr;
  wire soc_map$m_is_IO_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_wr_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_wr_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_4;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_6,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [51 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [9 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_5,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_8,
	       MUX_rg_state$write_1__VAL_9;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_4,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_15,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23,
	       CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334,
	       IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485,
	       IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505,
	       IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469,
	       IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497,
	       IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344,
	       _theResult___fst__h5569,
	       io_req_wr_data_wdata__h23733,
	       mem_req_wr_data_wdata__h15943;
  reg [31 : 0] v__h13842,
	       v__h13848,
	       v__h16283,
	       v__h16289,
	       v__h16874,
	       v__h16880,
	       v__h17520,
	       v__h17526,
	       v__h17591,
	       v__h17597,
	       v__h17693,
	       v__h17699,
	       v__h17799,
	       v__h17805,
	       v__h17911,
	       v__h17917,
	       v__h18474,
	       v__h18480,
	       v__h18545,
	       v__h18551,
	       v__h18647,
	       v__h18653,
	       v__h18753,
	       v__h18759,
	       v__h18865,
	       v__h18871,
	       v__h19270,
	       v__h19276,
	       v__h19341,
	       v__h19347,
	       v__h19412,
	       v__h19418,
	       v__h19494,
	       v__h19500,
	       v__h20295,
	       v__h20301,
	       v__h20595,
	       v__h20601,
	       v__h20717,
	       v__h20723,
	       v__h20942,
	       v__h20948,
	       v__h22628,
	       v__h22634,
	       v__h22763,
	       v__h22769,
	       v__h23162,
	       v__h23168,
	       v__h23269,
	       v__h23275,
	       v__h23550,
	       v__h23556,
	       v__h24042,
	       v__h24048,
	       v__h24187,
	       v__h24193,
	       v__h24767,
	       v__h24773,
	       v__h24806,
	       v__h24812,
	       v__h25189,
	       v__h25195,
	       v__h26374,
	       v__h26380,
	       v__h3495,
	       v__h3501,
	       v__h3864,
	       v__h3870,
	       v__h3965,
	       v__h3971,
	       v__h4165,
	       v__h4171;
  reg [7 : 0] io_req_wr_data_wstrb__h23734, mem_req_wr_data_wstrb__h15944;
  wire [63 : 0] _theResult___fst__h16061,
		_theResult___fst__h23851,
		_theResult___snd_fst__h5190,
		_theResult___snd_fst__h5261,
		_theResult___snd_fst__h5798,
		_theResult___snd_snd_fst__h5192,
		_theResult___snd_snd_fst__h5263,
		cline_addr__h20353,
		cline_fabric_addr__h20354,
		fabric_addr__h15685,
		io_req_wr_addr_awaddr__h23647,
		lev_0_pte_pa__h18196,
		lev_0_pte_pa_w64_fa__h18198,
		lev_1_PTN_pa__h17166,
		lev_1_pte_pa__h17168,
		lev_1_pte_pa_w64_fa__h17170,
		lev_2_pte_pa__h16665,
		lev_2_pte_pa_w64_fa__h16667,
		pa___1__h5575,
		pa___1__h5624,
		pa___1__h5693,
		pte___1__h5847,
		pte___1__h5874,
		pte___2__h5567,
		result__h12965,
		result__h12993,
		result__h13021,
		result__h13049,
		result__h13077,
		result__h13105,
		result__h13133,
		result__h13178,
		result__h13206,
		result__h13234,
		result__h13262,
		result__h13290,
		result__h13318,
		result__h13346,
		result__h13374,
		result__h13419,
		result__h13447,
		result__h13475,
		result__h13503,
		result__h13544,
		result__h13572,
		result__h13600,
		result__h13628,
		result__h13669,
		result__h13697,
		result__h13736,
		result__h13764,
		result__h22985,
		result__h23012,
		result__h23038,
		result__h23064,
		result__h23090,
		result__h23116,
		result__h23368,
		result__h23395,
		result__h23422,
		result__h23449,
		result__h23476,
		result__h23503,
		result__h6609,
		satp_pa__h2352,
		value__h5891,
		vpn_0_pa__h18195,
		vpn_1_pa__h17167,
		vpn_2_pa__h16664,
		word64__h6412,
		x1_avValue_pa__h5099,
		y__h6645;
  wire [55 : 0] x__h17395, x__h4291, x__h5578, x__h5627, x__h5696;
  wire [31 : 0] master_xactor_rg_rd_data_BITS_31_TO_0__q6,
		rg_ld_val_BITS_31_TO_0__q5,
		word64412_BITS_31_TO_0__q9,
		word64412_BITS_63_TO_32__q13;
  wire [15 : 0] master_xactor_rg_rd_data_BITS_15_TO_0__q3,
		rg_ld_val_BITS_15_TO_0__q4,
		word64412_BITS_15_TO_0__q8,
		word64412_BITS_31_TO_16__q12,
		word64412_BITS_47_TO_32__q16,
		word64412_BITS_63_TO_48__q19;
  wire [7 : 0] master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       rg_ld_val_BITS_7_TO_0__q2,
	       strobe64__h16060,
	       strobe64__h16103,
	       strobe64__h16126,
	       strobe64__h23850,
	       strobe64__h23893,
	       strobe64__h23916,
	       word64412_BITS_15_TO_8__q10,
	       word64412_BITS_23_TO_16__q11,
	       word64412_BITS_31_TO_24__q14,
	       word64412_BITS_39_TO_32__q15,
	       word64412_BITS_47_TO_40__q17,
	       word64412_BITS_55_TO_48__q18,
	       word64412_BITS_63_TO_56__q20,
	       word64412_BITS_7_TO_0__q7;
  wire [5 : 0] shift_bits__h15741, shift_bits__h23655;
  wire [4 : 0] IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d251,
	       access_exc_code__h3033,
	       exc_code___1__h5468,
	       x1_avValue_exc_code__h5100;
  wire [3 : 0] b__h16656;
  wire IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_NOT_ETC___d147,
       IF_rg_op_6_THEN_NOT_master_xactor_crg_wr_addr__ETC___d155,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d157,
       NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d199,
       NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d223,
       NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_rg_pri_ETC___d233,
       NOT_cfg_verbosity_read__0_ULE_2_29___d730,
       NOT_dmem_not_imem_1_AND_NOT_rg_op_6_0_85_AND_t_ETC___d192,
       NOT_master_xactor_rg_rd_data_59_BIT_0_63_64_OR_ETC___d591,
       NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d143,
       NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d154,
       NOT_req_f3_BITS_1_TO_0_83_EQ_0b0_84_85_AND_NOT_ETC___d904,
       NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d193,
       NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d225,
       NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d266,
       NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d399,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d159,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d256,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d270,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d273,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d283,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d354,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d358,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d388,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d406,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d527,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d533,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542,
       NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d262,
       cfg_verbosity_read__0_ULE_1___d11,
       dmem_not_imem_OR_rg_op_6_7_OR_NOT_tlb_lookup_r_ETC___d79,
       master_xactor_crg_rd_data_full_port1__read__58_ETC___d585,
       master_xactor_crg_rd_data_full_port1__read__58_ETC___d648,
       master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d634,
       master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d673,
       master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d679,
       master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d624,
       master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d636,
       ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130,
       req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d210,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d257,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d200,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d244,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d248,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d261,
       rg_priv_9_ULE_0b1___d40,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d76,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94,
       y__h5395;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_2 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd52),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(11'd1024)) ram_word64_set(.CLKA(CLK),
					     .CLKB(CLK),
					     .ADDRA(ram_word64_set$ADDRA),
					     .ADDRB(ram_word64_set$ADDRB),
					     .DIA(ram_word64_set$DIA),
					     .DIB(ram_word64_set$DIB),
					     .WEA(ram_word64_set$WEA),
					     .WEB(ram_word64_set$WEB),
					     .ENA(ram_word64_set$ENA),
					     .ENB(ram_word64_set$ENB),
					     .DOA(),
					     .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_lim(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_lim(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_lim(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_lim(),
		    .m_timer0_addr_size(),
		    .m_timer0_addr_base(),
		    .m_timer0_addr_lim(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr));

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_crg_rd_data_full_port1__read__58_ETC___d585 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full_port1__read__58_ETC___d648 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d11 || tlb$RDY_lookup) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d159 &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd13 &&
	     !rg_op ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_wr_req
  assign CAN_FIRE_RL_rl_io_wr_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op ;
  assign WILL_FIRE_RL_rl_io_wr_req = MUX_rg_state$write_1__SEL_5 ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd5 &&
	     b__h16656 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd9 &&
	     b__h16656 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h16656 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d406 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_83_EQ_0b0_84_85_AND_NOT_ETC___d904 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && rg_priv_9_ULE_0b1___d40 &&
	     rg_satp[63:60] == 4'd8 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_59_BIT_0_63_64_OR_ETC___d591 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_4 =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_5 =
	     CAN_FIRE_RL_rl_io_wr_req && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d248 ;
  assign MUX_rg_state$write_1__SEL_15 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d634 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h22985 or
	  result__h23038 or
	  result__h23090 or
	  master_xactor_rg_rd_data or
	  result__h23012 or result__h23064 or result__h23116)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h22985;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23038;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23090;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23012;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23064;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23116;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 or
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22 or
	  rg_addr or
	  word64__h6412 or
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 or
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23)
  begin
    case (rg_f3)
      3'b0:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469;
      3'b001:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497;
      3'b010:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      (rg_addr[2:0] == 3'h0) ? word64__h6412 : 64'd0;
      3'b100:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485;
      3'b101:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505;
      3'b110:
	  MUX_dw_output_ld_val$wset_1__VAL_2 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h23368 or
	  result__h23422 or
	  result__h23476 or
	  rg_ld_val or result__h23395 or result__h23449 or result__h23503)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23368;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23422;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23476;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_4 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23395;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23449;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h23503;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_4 = 64'd0;
    endcase
  end
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { lev_1_pte_pa_w64_fa__h17170, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { lev_0_pte_pa_w64_fa__h18198, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 = { rg_pa, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { lev_2_pte_pa_w64_fa__h16667, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { cline_addr__h20353, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_6 =
	     { cline_fabric_addr__h20354, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { fabric_addr__h15685, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { io_req_wr_addr_awaddr__h23647, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { mem_req_wr_data_wdata__h15943,
	       mem_req_wr_data_wstrb__h15944 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { io_req_wr_data_wdata__h23733, io_req_wr_data_wstrb__h23734 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:13] } ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 10'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[12:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = req_op ? 5'd6 : 5'd4 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       exc_code___1__h5468 :
	       access_exc_code__h3033 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_83_EQ_0b0_84_85_AND_NOT_ETC___d904 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_9 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       5'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d251 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2] ||
		 !master_xactor_rg_rd_data[3] &&
		 !master_xactor_rg_rd_data[1]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     5'd8 :
		     ((master_xactor_rg_rd_data[18:10] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     5'd7 :
		     ((master_xactor_rg_rd_data[27:19] != 9'd0 ||
		       master_xactor_rg_rd_data[18:10] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d406 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     (WILL_FIRE_RL_rl_ptw_level_1 || WILL_FIRE_RL_rl_ptw_level_2) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 :
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h16656 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h16656 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_req:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_6;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  assign master_xactor_rg_wr_addr$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_2 ;
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ||
	     WILL_FIRE_RL_rl_io_wr_req ;

  // register master_xactor_rg_wr_data
  assign master_xactor_rg_wr_data$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_data$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_data$write_1__VAL_2 ;
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ||
	     WILL_FIRE_RL_rl_io_wr_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3033 or
	  MUX_rg_exc_code$write_1__SEL_4 or
	  x1_avValue_exc_code__h5100 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or MUX_rg_exc_code$write_1__SEL_7)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 5'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3033;
    MUX_rg_exc_code$write_1__SEL_4:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5100;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    default: rg_exc_code$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && rg_priv_9_ULE_0b1___d40 &&
	     rg_satp[63:60] == 4'd8 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_83_EQ_0b0_84_85_AND_NOT_ETC___d904 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_59_BIT_0_63_64_OR_ETC___d591 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  assign rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0] ;
  assign rg_ld_val$EN = WILL_FIRE_RL_rl_io_read_rsp ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_newrequest
  assign rg_newrequest$D_IN = MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ;
  assign rg_newrequest$EN =
	     EN_req &&
	     req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d256 ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : x1_avValue_pa__h5099 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  lev_1_pte_pa__h17168 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  lev_0_pte_pa__h18196 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h16665)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h17168;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h18196;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h16665;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd56;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = req_st_value ;
  assign rg_st_amo_val$EN = EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_wr_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  MUX_rg_state$write_1__VAL_6 or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_15)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_rl_io_wr_req: rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_6;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_15: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d248 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_wr_req ||
	     WILL_FIRE_RL_rl_io_read_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_15 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[12:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[12:6] :
	       rg_addr[12:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       52'h2AAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       52'hAAAAAAAAAAAAA /* unspecified value */  :
	       52'hAAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[12:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[12:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[12:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d283 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = x1_avValue_pa__h5099 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  MUX_tlb$insert_1__SEL_2 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte = master_xactor_rg_rd_data[63:0] ;
  assign tlb$insert_pte_pa = rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d634 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;

  // remaining internal signals
  assign IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_NOT_ETC___d147 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d143 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d143 ;
  assign IF_rg_op_6_THEN_NOT_master_xactor_crg_wr_addr__ETC___d155 =
	     rg_op ?
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read :
	       NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d154 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d157 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94) ?
	       tlb$RDY_lookup :
	       soc_map$m_is_IO_addr ||
	       IF_rg_op_6_THEN_NOT_master_xactor_crg_wr_addr__ETC___d155 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d251 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94) ?
	       5'd4 :
	       (soc_map$m_is_IO_addr ? 5'd13 : (rg_op ? 5'd12 : 5'd9)) ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d199 =
	     !cfg_verbosity_read__0_ULE_1___d11 &&
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130] &&
	      NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d193 &&
	      tlb$lookup[72] &&
	      (!rg_op || tlb$lookup[73])) ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d223 =
	     !cfg_verbosity_read__0_ULE_1___d11 &&
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      !tlb$lookup[130] ||
	      rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d210 ||
	      !tlb$lookup[72] ||
	      !tlb$lookup[73] ||
	      pte___2__h5567[7] ||
	      !rg_op) ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_rg_pri_ETC___d233 =
	     !cfg_verbosity_read__0_ULE_1___d11 && rg_priv_9_ULE_0b1___d40 &&
	     rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d225 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h5567[7] &&
	     rg_op ;
  assign NOT_cfg_verbosity_read__0_ULE_2_29___d730 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_1_AND_NOT_rg_op_6_0_85_AND_t_ETC___d192 =
	     !dmem_not_imem && !rg_op && tlb$lookup[69] ||
	     dmem_not_imem && !rg_op &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d76 ||
	     dmem_not_imem && rg_op && tlb$lookup[68] ;
  assign NOT_master_xactor_rg_rd_data_59_BIT_0_63_64_OR_ETC___d591 =
	     !master_xactor_rg_rd_data[0] ||
	     !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) ||
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d143 =
	     !ram_state_and_ctag_cset$DOB[51] || !rg_priv_9_ULE_0b1___d40 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__25_BIT_51__ETC___d154 =
	     !ram_state_and_ctag_cset$DOB[51] ||
	     !ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 ||
	     ((rg_f3 == 3'b010) ?
		IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_NOT_ETC___d147 :
		rg_f3 != 3'b110 ||
		IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_NOT_ETC___d147) ;
  assign NOT_req_f3_BITS_1_TO_0_83_EQ_0b0_84_85_AND_NOT_ETC___d904 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d193 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     NOT_dmem_not_imem_1_AND_NOT_rg_op_6_0_85_AND_t_ETC___d192 ;
  assign NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d225 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d266 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     !rg_op &&
	     tlb$lookup[69] ;
  assign NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d399 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d76) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d159 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130] ||
	      IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d157) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d256 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     rg_newrequest &&
	     !dmem_not_imem ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d262) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d270 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      !tlb$lookup[130] ||
	      NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d266 &&
	      tlb$lookup[72] &&
	      (!rg_op || tlb$lookup[73])) &&
	     rg_newrequest &&
	     !dmem_not_imem ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d273 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d262) &&
	     soc_map$m_is_IO_addr &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d225 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d283 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d354 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d358 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     cfg_verbosity != 4'd0 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d388 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d277 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d399 &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d406 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 &&
	     !soc_map$m_is_IO_addr &&
	     !rg_op &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d527 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 &&
	     !soc_map$m_is_IO_addr &&
	     !rg_op &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d533 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     tlb$lookup[69] &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d533 &&
	     !soc_map$m_is_IO_addr &&
	     !rg_op &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 &&
	     !dmem_not_imem ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 &&
	     !soc_map$m_is_IO_addr &&
	     !rg_op &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d262 =
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_79_OR_tlb_lookup_rg_sat_ETC___d193 &&
	     tlb$lookup[72] &&
	     (!rg_op || tlb$lookup[73]) ;
  assign _theResult___fst__h16061 = rg_st_amo_val << shift_bits__h15741 ;
  assign _theResult___fst__h23851 = rg_st_amo_val << shift_bits__h23655 ;
  assign _theResult___snd_fst__h5190 =
	     tlb$lookup[130] ? _theResult___snd_fst__h5261 : rg_addr ;
  assign _theResult___snd_fst__h5261 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86 ||
	      !tlb$lookup[72] ||
	      rg_op && !tlb$lookup[73]) ?
	       rg_addr :
	       _theResult___fst__h5569 ;
  assign _theResult___snd_fst__h5798 =
	     (!pte___2__h5567[7] && rg_op) ? pte___1__h5874 : pte___2__h5567 ;
  assign _theResult___snd_snd_fst__h5192 =
	     tlb$lookup[130] ?
	       _theResult___snd_snd_fst__h5263 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_snd_fst__h5263 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86 ||
	      !tlb$lookup[72] ||
	      rg_op && !tlb$lookup[73]) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h5798 ;
  assign access_exc_code__h3033 =
	     dmem_not_imem ? (rg_op ? 5'd7 : 5'd5) : 5'd1 ;
  assign b__h16656 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d11 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h20353 = { rg_pa[63:6], 6'd0 } ;
  assign cline_fabric_addr__h20354 =
	     cline_addr__h20353 | rg_req_byte_in_cline ;
  assign dmem_not_imem_OR_rg_op_6_7_OR_NOT_tlb_lookup_r_ETC___d79 =
	     (dmem_not_imem || rg_op || !tlb$lookup[69]) &&
	     (!dmem_not_imem || rg_op ||
	      !tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d76) ;
  assign exc_code___1__h5468 = x1_avValue_exc_code__h5100 ;
  assign fabric_addr__h15685 = { x1_avValue_pa__h5099[63:3], 3'd0 } ;
  assign io_req_wr_addr_awaddr__h23647 = { rg_pa[63:3], 3'd0 } ;
  assign lev_0_pte_pa__h18196 = lev_1_PTN_pa__h17166 + vpn_0_pa__h18195 ;
  assign lev_0_pte_pa_w64_fa__h18198 = { lev_0_pte_pa__h18196[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h17166 = { 8'd0, x__h17395 } ;
  assign lev_1_pte_pa__h17168 = lev_1_PTN_pa__h17166 + vpn_1_pa__h17167 ;
  assign lev_1_pte_pa_w64_fa__h17170 = { lev_1_pte_pa__h17168[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h16665 = satp_pa__h2352 + vpn_2_pa__h16664 ;
  assign lev_2_pte_pa_w64_fa__h16667 = { lev_2_pte_pa__h16665[63:3], 3'b0 } ;
  assign master_xactor_crg_rd_data_full_port1__read__58_ETC___d585 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[27:19] != 9'd0 ||
		 master_xactor_rg_rd_data[18:10] != 9'd0 ||
		 tlb$RDY_insert)) ;
  assign master_xactor_crg_rd_data_full_port1__read__58_ETC___d648 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[18:10] != 9'd0 || tlb$RDY_insert)) ;
  assign master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d634 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d673 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d679 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] != 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d624 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d636 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q3 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q6 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign pa___1__h5575 = { 8'd0, x__h5578 } ;
  assign pa___1__h5624 = { 8'd0, x__h5627 } ;
  assign pa___1__h5693 = { 8'd0, x__h5696 } ;
  assign pte___1__h5847 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h5874 =
	     { pte___2__h5567[63:8], 1'd1, pte___2__h5567[6:0] } ;
  assign pte___2__h5567 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h5847 ;
  assign ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 =
	     ram_state_and_ctag_cset$DOB[50:0] ==
	     x1_avValue_pa__h5099[63:13] ;
  assign req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h12965 =
	     { {56{word64412_BITS_15_TO_8__q10[7]}},
	       word64412_BITS_15_TO_8__q10 } ;
  assign result__h12993 =
	     { {56{word64412_BITS_23_TO_16__q11[7]}},
	       word64412_BITS_23_TO_16__q11 } ;
  assign result__h13021 =
	     { {56{word64412_BITS_31_TO_24__q14[7]}},
	       word64412_BITS_31_TO_24__q14 } ;
  assign result__h13049 =
	     { {56{word64412_BITS_39_TO_32__q15[7]}},
	       word64412_BITS_39_TO_32__q15 } ;
  assign result__h13077 =
	     { {56{word64412_BITS_47_TO_40__q17[7]}},
	       word64412_BITS_47_TO_40__q17 } ;
  assign result__h13105 =
	     { {56{word64412_BITS_55_TO_48__q18[7]}},
	       word64412_BITS_55_TO_48__q18 } ;
  assign result__h13133 =
	     { {56{word64412_BITS_63_TO_56__q20[7]}},
	       word64412_BITS_63_TO_56__q20 } ;
  assign result__h13178 = { 56'd0, word64__h6412[7:0] } ;
  assign result__h13206 = { 56'd0, word64__h6412[15:8] } ;
  assign result__h13234 = { 56'd0, word64__h6412[23:16] } ;
  assign result__h13262 = { 56'd0, word64__h6412[31:24] } ;
  assign result__h13290 = { 56'd0, word64__h6412[39:32] } ;
  assign result__h13318 = { 56'd0, word64__h6412[47:40] } ;
  assign result__h13346 = { 56'd0, word64__h6412[55:48] } ;
  assign result__h13374 = { 56'd0, word64__h6412[63:56] } ;
  assign result__h13419 =
	     { {48{word64412_BITS_15_TO_0__q8[15]}},
	       word64412_BITS_15_TO_0__q8 } ;
  assign result__h13447 =
	     { {48{word64412_BITS_31_TO_16__q12[15]}},
	       word64412_BITS_31_TO_16__q12 } ;
  assign result__h13475 =
	     { {48{word64412_BITS_47_TO_32__q16[15]}},
	       word64412_BITS_47_TO_32__q16 } ;
  assign result__h13503 =
	     { {48{word64412_BITS_63_TO_48__q19[15]}},
	       word64412_BITS_63_TO_48__q19 } ;
  assign result__h13544 = { 48'd0, word64__h6412[15:0] } ;
  assign result__h13572 = { 48'd0, word64__h6412[31:16] } ;
  assign result__h13600 = { 48'd0, word64__h6412[47:32] } ;
  assign result__h13628 = { 48'd0, word64__h6412[63:48] } ;
  assign result__h13669 =
	     { {32{word64412_BITS_31_TO_0__q9[31]}},
	       word64412_BITS_31_TO_0__q9 } ;
  assign result__h13697 =
	     { {32{word64412_BITS_63_TO_32__q13[31]}},
	       word64412_BITS_63_TO_32__q13 } ;
  assign result__h13736 = { 32'd0, word64__h6412[31:0] } ;
  assign result__h13764 = { 32'd0, word64__h6412[63:32] } ;
  assign result__h22985 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h23012 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h23038 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q3[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q3 } ;
  assign result__h23064 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h23090 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q6[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q6 } ;
  assign result__h23116 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h23368 =
	     { {56{rg_ld_val_BITS_7_TO_0__q2[7]}},
	       rg_ld_val_BITS_7_TO_0__q2 } ;
  assign result__h23395 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h23422 =
	     { {48{rg_ld_val_BITS_15_TO_0__q4[15]}},
	       rg_ld_val_BITS_15_TO_0__q4 } ;
  assign result__h23449 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h23476 =
	     { {32{rg_ld_val_BITS_31_TO_0__q5[31]}},
	       rg_ld_val_BITS_31_TO_0__q5 } ;
  assign result__h23503 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h6609 =
	     { {56{word64412_BITS_7_TO_0__q7[7]}},
	       word64412_BITS_7_TO_0__q7 } ;
  assign rg_ld_val_BITS_15_TO_0__q4 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q5 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q2 = rg_ld_val[7:0] ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d210 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d257 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem ||
	     rg_op ||
	     !tlb$lookup[69] ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_rg_op_6_7_OR_NOT_tlb_lookup_r_ETC___d79 &&
	     (!dmem_not_imem || !rg_op || !tlb$lookup[68]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d200 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86 ||
	      !tlb$lookup[72] ||
	      rg_op && !tlb$lookup[73]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d244 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv == 2'b0 && !tlb$lookup[70] ||
	      rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	      dmem_not_imem_OR_rg_op_6_7_OR_NOT_tlb_lookup_r_ETC___d79 ||
	      !tlb$lookup[72]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d248 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d244 ||
	     soc_map$m_is_IO_addr ||
	     rg_op ||
	     !ram_state_and_ctag_cset$DOB[51] ||
	     !ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130 ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d261 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d257 ||
	      !tlb$lookup[72] ||
	      rg_op && !tlb$lookup[73]) &&
	     rg_newrequest &&
	     !dmem_not_imem ;
  assign rg_priv_9_ULE_0b1___d40 = rg_priv <= 2'b01 ;
  assign satp_pa__h2352 = { 8'd0, x__h4291 } ;
  assign shift_bits__h15741 = { x1_avValue_pa__h5099[2:0], 3'b0 } ;
  assign shift_bits__h23655 = { rg_pa[2:0], 3'b0 } ;
  assign strobe64__h16060 = 8'b00000001 << x1_avValue_pa__h5099[2:0] ;
  assign strobe64__h16103 = 8'b00000011 << x1_avValue_pa__h5099[2:0] ;
  assign strobe64__h16126 = 8'b00001111 << x1_avValue_pa__h5099[2:0] ;
  assign strobe64__h23850 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h23893 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h23916 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d76 =
	     tlb$lookup[67] | y__h5395 ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d94 =
	     tlb$lookup[130] &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d86 ||
	      !tlb$lookup[72] ||
	      rg_op && !tlb$lookup[73]) ;
  assign value__h5891 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_snd_fst__h5192 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h18195 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h17167 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h16664 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign word64412_BITS_15_TO_0__q8 = word64__h6412[15:0] ;
  assign word64412_BITS_15_TO_8__q10 = word64__h6412[15:8] ;
  assign word64412_BITS_23_TO_16__q11 = word64__h6412[23:16] ;
  assign word64412_BITS_31_TO_0__q9 = word64__h6412[31:0] ;
  assign word64412_BITS_31_TO_16__q12 = word64__h6412[31:16] ;
  assign word64412_BITS_31_TO_24__q14 = word64__h6412[31:24] ;
  assign word64412_BITS_39_TO_32__q15 = word64__h6412[39:32] ;
  assign word64412_BITS_47_TO_32__q16 = word64__h6412[47:32] ;
  assign word64412_BITS_47_TO_40__q17 = word64__h6412[47:40] ;
  assign word64412_BITS_55_TO_48__q18 = word64__h6412[55:48] ;
  assign word64412_BITS_63_TO_32__q13 = word64__h6412[63:32] ;
  assign word64412_BITS_63_TO_48__q19 = word64__h6412[63:48] ;
  assign word64412_BITS_63_TO_56__q20 = word64__h6412[63:56] ;
  assign word64412_BITS_7_TO_0__q7 = word64__h6412[7:0] ;
  assign word64__h6412 = ram_word64_set$DOB & y__h6645 ;
  assign x1_avValue_exc_code__h5100 =
	     dmem_not_imem ? (rg_op ? 5'd15 : 5'd13) : 5'd12 ;
  assign x1_avValue_pa__h5099 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h5190 :
	       rg_addr ;
  assign x__h17395 = { master_xactor_rg_rd_data[53:10], 12'b0 } ;
  assign x__h4291 = { rg_satp[43:0], 12'b0 } ;
  assign x__h5578 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h5627 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h5696 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h5395 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h6645 =
	     {64{ram_state_and_ctag_cset$DOB[51] &&
		 ram_state_and_ctag_cset_b_read__25_BITS_50_TO__ETC___d130}} ;
  always@(tlb$lookup or
	  rg_addr or pa___1__h5575 or pa___1__h5624 or pa___1__h5693)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h5569 = pa___1__h5575;
      2'd1: _theResult___fst__h5569 = pa___1__h5624;
      2'd2: _theResult___fst__h5569 = pa___1__h5693;
      2'd3: _theResult___fst__h5569 = rg_addr;
    endcase
  end
  always@(rg_f3 or strobe64__h23850 or strobe64__h23893 or strobe64__h23916)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h23734 = strobe64__h23850;
      2'b01: io_req_wr_data_wstrb__h23734 = strobe64__h23893;
      2'b10: io_req_wr_data_wstrb__h23734 = strobe64__h23916;
      2'b11: io_req_wr_data_wstrb__h23734 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h23851)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h23733 = _theResult___fst__h23851;
      2'd3: io_req_wr_data_wdata__h23733 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h16060 or strobe64__h16103 or strobe64__h16126)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h15944 = strobe64__h16060;
      2'b01: mem_req_wr_data_wstrb__h15944 = strobe64__h16103;
      2'b10: mem_req_wr_data_wstrb__h15944 = strobe64__h16126;
      2'b11: mem_req_wr_data_wstrb__h15944 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h16061)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h15943 = _theResult___fst__h16061;
      2'd3: mem_req_wr_data_wdata__h15943 = rg_st_amo_val;
    endcase
  end
  always@(x1_avValue_pa__h5099 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5099[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h13419 or
	  result__h13447 or result__h13475 or result__h13503)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 =
	      result__h13419;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 =
	      result__h13447;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 =
	      result__h13475;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 =
	      result__h13503;
      default: IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d497 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h6609 or
	  result__h12965 or
	  result__h12993 or
	  result__h13021 or
	  result__h13049 or
	  result__h13077 or result__h13105 or result__h13133)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h6609;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h12965;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h12993;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h13021;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h13049;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h13077;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h13105;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_SEX_ETC___d469 =
	      result__h13133;
    endcase
  end
  always@(x1_avValue_pa__h5099 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5099[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or
	  result__h13544 or
	  result__h13572 or result__h13600 or result__h13628)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 =
	      result__h13544;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 =
	      result__h13572;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 =
	      result__h13600;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 =
	      result__h13628;
      default: IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d505 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h13178 or
	  result__h13206 or
	  result__h13234 or
	  result__h13262 or
	  result__h13290 or
	  result__h13318 or result__h13346 or result__h13374)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13178;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13206;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13234;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13262;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13290;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13318;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13346;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_41_EQ_0x0_42_THEN_0_C_ETC___d485 =
	      result__h13374;
    endcase
  end
  always@(x1_avValue_pa__h5099 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5099[2:0])
      3'h0:
	  CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334 or
	  CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d325;
      3'b001:
	  IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d334;
      3'b010:
	  IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 =
	      CASE_x1_avValue_pa099_BITS_2_TO_0_0x0_ram_word_ETC__q21;
      3'b011:
	  IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 =
	      rg_st_amo_val;
      default: IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or result__h13669 or result__h13697)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22 =
	      result__h13669;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22 =
	      result__h13697;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3669_0x4_re_ETC__q22 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13736 or result__h13764)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23 =
	      result__h13736;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23 =
	      result__h13764;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3736_0x4_re_ETC__q23 =
		   64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_newrequest <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_newrequest$EN)
	  rg_newrequest <= `BSV_ASSIGNMENT_DELAY rg_newrequest$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 5'h0A;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_newrequest = 1'h0;
    rg_op = 1'h0;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3870 = $stime;
	  #0;
	end
    v__h3864 = v__h3870 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3864,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3864,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h3971 = $stime;
	  #0;
	end
    v__h3965 = v__h3971 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h3965, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h3965, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[12:6],
		 rg_addr[12:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23556 = $stime;
	  #0;
	end
    v__h23550 = v__h23556 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23550,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23550,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h3501 = $stime;
	  #0;
	end
    v__h3495 = v__h3501 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3495, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3495, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h17597 = $stime;
	  #0;
	end
    v__h17591 = v__h17597 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h17591,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h17591,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h17699 = $stime;
	  #0;
	end
    v__h17693 = v__h17699 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h17693,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h17693,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 1 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_1_pte_pa_w64_fa__h17170);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d624)
	begin
	  v__h17805 = $stime;
	  #0;
	end
    v__h17799 = v__h17805 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d624)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h17799,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h17799,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	   master_xactor_rg_rd_data[18:10] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d636)
	begin
	  v__h17917 = $stime;
	  #0;
	end
    v__h17911 = v__h17917 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d636)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h17911,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h17911,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_59_BIT_3_70_OR_master_ETC___d636)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h17166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h17526 = $stime;
	  #0;
	end
    v__h17520 = v__h17526 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h17520,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h17520,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h18551 = $stime;
	  #0;
	end
    v__h18545 = v__h18551 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h18545,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h18545,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h18653 = $stime;
	  #0;
	end
    v__h18647 = v__h18653 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h18647,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h18647,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 0 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_0_pte_pa_w64_fa__h18198);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d673)
	begin
	  v__h18871 = $stime;
	  #0;
	end
    v__h18865 = v__h18871 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d673)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h18865,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h18865,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d673)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h17166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d679)
	begin
	  v__h18759 = $stime;
	  #0;
	end
    v__h18753 = v__h18759 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_59_BITS_65_TO_64_60_E_ETC___d679)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h18753,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h18753,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  master_xactor_rg_rd_data[18:10] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h18480 = $stime;
	  #0;
	end
    v__h18474 = v__h18480 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h18474,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h18474,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h19347 = $stime;
	  #0;
	end
    v__h19341 = v__h19347 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h19341,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h19341,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h19418 = $stime;
	  #0;
	end
    v__h19412 = v__h19418 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h19412,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h19412,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5468);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h19500 = $stime;
	  #0;
	end
    v__h19494 = v__h19500 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h19494,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h19494,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h17166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h19276 = $stime;
	  #0;
	end
    v__h19270 = v__h19276 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h19270,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h19270,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop && cfg_verbosity != 4'd0)
	$display("    Sending line refill request to main memory:0x%0h",
		 cline_fabric_addr__h20354);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	begin
	  v__h20601 = $stime;
	  #0;
	end
    v__h20595 = v__h20601 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h20595,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h20595,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("'h%h", cline_fabric_addr__h20354);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h4171 = $stime;
	  #0;
	end
    v__h4165 = v__h4171 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4165,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4165,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2352,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:13],
		 rg_addr[12:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[12:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[51])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[51])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[51])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[50:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[51])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d199)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d200 &&
	  tlb$lookup[130])
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pa__h5099);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_exc_code__h5100);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_NOT_rg_ETC___d223)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1_2_AND_rg_pri_ETC___d233)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h5891, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$display("TLB Miss: 0x%16h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d261)
	$display("TLB Exception: 0x%16h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d270)
	$display("Address translation: 0x%16h => 0x%16h",
		 rg_addr,
		 x1_avValue_pa__h5099);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d273)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5099,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349)
	$write(" 0x%0x",
	       IF_rg_f3_33_EQ_0b0_34_THEN_IF_IF_rg_priv_9_ULE_ETC___d344);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d349)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d354)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5099,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d358)
	$display("    Sending write address to main memory: 0x%0h",
		 fabric_addr__h15685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d388)
	begin
	  v__h16289 = $stime;
	  #0;
	end
    v__h16283 = v__h16289 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d388)
	$display("%0d: ERROR: CreditCounter: overflow", v__h16283);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d388)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("'h%h", fabric_addr__h15685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("'h%h", mem_req_wr_data_wdata__h15943);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("'h%h", mem_req_wr_data_wstrb__h15944, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d527)
	begin
	  v__h13848 = $stime;
	  #0;
	end
    v__h13842 = v__h13848 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d527)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13842,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6412,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13842,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6412,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538)
	$display("RESULT: 0x%16h", word64__h6412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d527)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	begin
	  v__h20723 = $stime;
	  #0;
	end
    v__h20717 = v__h20723 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20717,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20717,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h20948 = $stime;
	  #0;
	end
    v__h20942 = v__h20948 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20942,
		   "D_MMU_Cache",
		   access_exc_code__h3033);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20942,
		   "I_MMU_Cache",
		   access_exc_code__h3033);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_29___d730)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22634 = $stime;
	  #0;
	end
    v__h22628 = v__h22634 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22628,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22628,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22769 = $stime;
	  #0;
	end
    v__h22763 = v__h22769 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22763,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22763,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23168 = $stime;
	  #0;
	end
    v__h23162 = v__h23168 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23162,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23162,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23275 = $stime;
	  #0;
	end
    v__h23269 = v__h23275 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h23269,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h23269,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h24048 = $stime;
	  #0;
	end
    v__h24042 = v__h24048 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h24042);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24193 = $stime;
	  #0;
	end
    v__h24187 = v__h24193 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_wr_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24187,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_wr_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24187,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h23647);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wdata__h23733);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h23734, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h16880 = $stime;
	  #0;
	end
    v__h16874 = v__h16880 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h16874,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h16874,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 2 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_2_pte_pa_w64_fa__h16667);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h25195 = $stime;
	  #0;
	end
    v__h25189 = v__h25195 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h25189, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h25189, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && !req_op)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !dmem_not_imem)
	$display("IMEM REQUEST: 0x%16h", req_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_83_EQ_0b0_84_OR_req_f3_BITS_ETC___d913 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[12:6],
		 req_addr[12:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill && cfg_verbosity != 4'd0)
	$display("    Sending line read request to main memory: 0x%0h",
		 cline_addr__h20353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h20301 = $stime;
	  #0;
	end
    v__h20295 = v__h20301 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h20295,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h20295,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", cline_addr__h20353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h26380 = $stime;
	  #0;
	end
    v__h26374 = v__h26380 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h26374, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h26374, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24812 = $stime;
	  #0;
	end
    v__h24806 = v__h24812 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h24806,
		 "D_MMU_Cache",
		 $unsigned(b__h16656));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h24806,
		 "I_MMU_Cache",
		 $unsigned(b__h16656));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h24773 = $stime;
	  #0;
	end
    v__h24767 = v__h24773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h24767,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h24767,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

